# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CTXSwig', [dirname(__file__)])
        except ImportError:
            import _CTXSwig
            return _CTXSwig
        if fp is not None:
            try:
                _mod = imp.load_module('_CTXSwig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CTXSwig = swig_import_helper()
    del swig_import_helper
else:
    import _CTXSwig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class CTXBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTXBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CTXBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CTXSwig.new_CTXBase(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _CTXSwig.delete_CTXBase
    __del__ = lambda self: None
    __swig_getmethods__["setErrorLocation"] = lambda x: _CTXSwig.CTXBase_setErrorLocation
    if _newclass:
        setErrorLocation = staticmethod(_CTXSwig.CTXBase_setErrorLocation)
    __swig_getmethods__["setErrorText"] = lambda x: _CTXSwig.CTXBase_setErrorText
    if _newclass:
        setErrorText = staticmethod(_CTXSwig.CTXBase_setErrorText)
    __swig_getmethods__["errorText"] = lambda x: _CTXSwig.CTXBase_errorText
    if _newclass:
        errorText = staticmethod(_CTXSwig.CTXBase_errorText)
    __swig_getmethods__["errorLocation"] = lambda x: _CTXSwig.CTXBase_errorLocation
    if _newclass:
        errorLocation = staticmethod(_CTXSwig.CTXBase_errorLocation)

    def saveCheckpoint(self, out):
        return _CTXSwig.CTXBase_saveCheckpoint(self, out)

    def loadCheckpoint(self, arg2):
        return _CTXSwig.CTXBase_loadCheckpoint(self, arg2)

    def saveConfiguration(self, out):
        return _CTXSwig.CTXBase_saveConfiguration(self, out)

    def loadConfiguration(self, arg2):
        return _CTXSwig.CTXBase_loadConfiguration(self, arg2)
CTXBase_swigregister = _CTXSwig.CTXBase_swigregister
CTXBase_swigregister(CTXBase)

def CTXBase_setErrorLocation(loc):
    return _CTXSwig.CTXBase_setErrorLocation(loc)
CTXBase_setErrorLocation = _CTXSwig.CTXBase_setErrorLocation

def CTXBase_setErrorText(text):
    return _CTXSwig.CTXBase_setErrorText(text)
CTXBase_setErrorText = _CTXSwig.CTXBase_setErrorText

def CTXBase_errorText():
    return _CTXSwig.CTXBase_errorText()
CTXBase_errorText = _CTXSwig.CTXBase_errorText

def CTXBase_errorLocation():
    return _CTXSwig.CTXBase_errorLocation()
CTXBase_errorLocation = _CTXSwig.CTXBase_errorLocation

class CTXHistogram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTXHistogram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CTXHistogram, name)
    __repr__ = _swig_repr

    def __init__(self, binsize=10, bins=50):
        this = _CTXSwig.new_CTXHistogram(binsize, bins)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _CTXSwig.delete_CTXHistogram
    __del__ = lambda self: None

    def add(self, *args):
        return _CTXSwig.CTXHistogram_add(self, *args)

    def doubleBinSize(self):
        return _CTXSwig.CTXHistogram_doubleBinSize(self)

    def clear(self, *args):
        return _CTXSwig.CTXHistogram_clear(self, *args)

    def size(self):
        return _CTXSwig.CTXHistogram_size(self)

    def getBins(self):
        return _CTXSwig.CTXHistogram_getBins(self)

    def getBinSize(self):
        return _CTXSwig.CTXHistogram_getBinSize(self)

    def getTotal(self):
        return _CTXSwig.CTXHistogram_getTotal(self)

    def getCount(self):
        return _CTXSwig.CTXHistogram_getCount(self)

    def getAverage(self):
        return _CTXSwig.CTXHistogram_getAverage(self)

    def getSquaredTotal(self):
        return _CTXSwig.CTXHistogram_getSquaredTotal(self)

    def getData(self, index):
        return _CTXSwig.CTXHistogram_getData(self, index)

    def getMax(self):
        return _CTXSwig.CTXHistogram_getMax(self)

    def printWithMultiplier(self, multiplier):
        return _CTXSwig.CTXHistogram_printWithMultiplier(self, multiplier)

    def printPercent(self):
        return _CTXSwig.CTXHistogram_printPercent(self)

    def _print(self):
        return _CTXSwig.CTXHistogram__print(self)
CTXHistogram_swigregister = _CTXSwig.CTXHistogram_swigregister
CTXHistogram_swigregister(CTXHistogram)


def node_less_then_eq(n1, n2):
    return _CTXSwig.node_less_then_eq(n1, n2)
node_less_then_eq = _CTXSwig.node_less_then_eq

def floorLog2(x):
    return _CTXSwig.floorLog2(x)
floorLog2 = _CTXSwig.floorLog2

def my_clock():
    return _CTXSwig.my_clock()
my_clock = _CTXSwig.my_clock

def logistic(aScoreEMA, step, max, min, inflection):
    return _CTXSwig.logistic(aScoreEMA, step, max, min, inflection)
logistic = _CTXSwig.logistic
class Bar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bar, name)
    __repr__ = _swig_repr
    __swig_getmethods__["showBar"] = lambda x: _CTXSwig.Bar_showBar
    if _newclass:
        showBar = staticmethod(_CTXSwig.Bar_showBar)
    sm_width = _CTXSwig.Bar_sm_width

    def __init__(self):
        this = _CTXSwig.new_Bar()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _CTXSwig.delete_Bar
    __del__ = lambda self: None
Bar_swigregister = _CTXSwig.Bar_swigregister
Bar_swigregister(Bar)

def Bar_showBar(*args):
    return _CTXSwig.Bar_showBar(*args)
Bar_showBar = _CTXSwig.Bar_showBar


def print_trace():
    return _CTXSwig.print_trace()
print_trace = _CTXSwig.print_trace
class CTXComponent(CTXBase):
    __swig_setmethods__ = {}
    for _s in [CTXBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTXComponent, name, value)
    __swig_getmethods__ = {}
    for _s in [CTXBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTXComponent, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CTXSwig.delete_CTXComponent
    __del__ = lambda self: None

    def run(self, cycles):
        return _CTXSwig.CTXComponent_run(self, cycles)

    def runSpindle(self, cycles):
        return _CTXSwig.CTXComponent_runSpindle(self, cycles)

    def postinitialize(self):
        return _CTXSwig.CTXComponent_postinitialize(self)

    def getStats(self, verbosity):
        return _CTXSwig.CTXComponent_getStats(self, verbosity)

    def getOwner(self):
        return _CTXSwig.CTXComponent_getOwner(self)

    def getId(self):
        return _CTXSwig.CTXComponent_getId(self)

    def getGenerator(self):
        return _CTXSwig.CTXComponent_getGenerator(self)

    def setSeed(self, seed):
        return _CTXSwig.CTXComponent_setSeed(self, seed)

    def asString(self):
        return _CTXSwig.CTXComponent_asString(self)

    def getComponentName(self):
        return _CTXSwig.CTXComponent_getComponentName(self)

    def getName(self):
        return _CTXSwig.CTXComponent_getName(self)

    def getClock(self):
        return _CTXSwig.CTXComponent_getClock(self)

    def isTraceEnabled(self):
        return _CTXSwig.CTXComponent_isTraceEnabled(self)

    def enableTrace(self):
        return _CTXSwig.CTXComponent_enableTrace(self)
    __swig_getmethods__["resetStatic"] = lambda x: _CTXSwig.CTXComponent_resetStatic
    if _newclass:
        resetStatic = staticmethod(_CTXSwig.CTXComponent_resetStatic)

    def getSimulatorPtr(self):
        return _CTXSwig.CTXComponent_getSimulatorPtr(self)

    def getNetwork(self):
        return _CTXSwig.CTXComponent_getNetwork(self)

    def getHyperRegion(self):
        return _CTXSwig.CTXComponent_getHyperRegion(self)

    def getRegion(self):
        return _CTXSwig.CTXComponent_getRegion(self)

    def getHypercolumn(self):
        return _CTXSwig.CTXComponent_getHypercolumn(self)

    def getCCore(self):
        return _CTXSwig.CTXComponent_getCCore(self)

    def getColumn(self):
        return _CTXSwig.CTXComponent_getColumn(self)

    def getCortex(self):
        return _CTXSwig.CTXComponent_getCortex(self)

    def getHyperRegionId(self):
        return _CTXSwig.CTXComponent_getHyperRegionId(self)

    def getModel(self):
        return _CTXSwig.CTXComponent_getModel(self)

    def getModelRW(self):
        return _CTXSwig.CTXComponent_getModelRW(self)

    def getCompById(self, id, name):
        return _CTXSwig.CTXComponent_getCompById(self, id, name)

    def CTXRandomFloat(self, max, min=0.0):
        return _CTXSwig.CTXComponent_CTXRandomFloat(self, max, min)

    def CTXRandomFlipCoin(self, probability):
        return _CTXSwig.CTXComponent_CTXRandomFlipCoin(self, probability)

    def CTXRandomInteger(self, max):
        return _CTXSwig.CTXComponent_CTXRandomInteger(self, max)

    def CTXRandomFloatNormal(self, mean, stddev):
        return _CTXSwig.CTXComponent_CTXRandomFloatNormal(self, mean, stddev)
CTXComponent_swigregister = _CTXSwig.CTXComponent_swigregister
CTXComponent_swigregister(CTXComponent)

def CTXComponent_resetStatic():
    return _CTXSwig.CTXComponent_resetStatic()
CTXComponent_resetStatic = _CTXSwig.CTXComponent_resetStatic

class CTXString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTXString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CTXString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CTXSwig.new_CTXString(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _CTXSwig.delete_CTXString
    __del__ = lambda self: None

    def size(self):
        return _CTXSwig.CTXString_size(self)

    def isLike(self, aString):
        return _CTXSwig.CTXString_isLike(self, aString)

    def asInteger(self):
        return _CTXSwig.CTXString_asInteger(self)

    def asLongLong(self):
        return _CTXSwig.CTXString_asLongLong(self)

    def asDouble(self):
        return _CTXSwig.CTXString_asDouble(self)

    def indexOf(self, *args):
        return _CTXSwig.CTXString_indexOf(self, *args)

    def lastIndexOf(self, aCharacter):
        return _CTXSwig.CTXString_lastIndexOf(self, aCharacter)

    def subString(self, first, increment=0):
        return _CTXSwig.CTXString_subString(self, first, increment)

    def word(self, index):
        return _CTXSwig.CTXString_word(self, index)

    def firstWord(self):
        return _CTXSwig.CTXString_firstWord(self)

    def lastWord(self):
        return _CTXSwig.CTXString_lastWord(self)

    def removeFirstWord(self):
        return _CTXSwig.CTXString_removeFirstWord(self)

    def removeFirst(self):
        return _CTXSwig.CTXString_removeFirst(self)

    def removeLast(self):
        return _CTXSwig.CTXString_removeLast(self)

    def remove(self, string):
        return _CTXSwig.CTXString_remove(self, string)

    def replace(self, org, dst):
        return _CTXSwig.CTXString_replace(self, org, dst)

    def sprintf(self, format):
        return _CTXSwig.CTXString_sprintf(self, format)

    def expandVars(self):
        return _CTXSwig.CTXString_expandVars(self)
    __swig_getmethods__["stripBlanks"] = lambda x: _CTXSwig.CTXString_stripBlanks
    if _newclass:
        stripBlanks = staticmethod(_CTXSwig.CTXString_stripBlanks)
    __swig_getmethods__["invert"] = lambda x: _CTXSwig.CTXString_invert
    if _newclass:
        invert = staticmethod(_CTXSwig.CTXString_invert)
    __swig_getmethods__["lineFrom"] = lambda x: _CTXSwig.CTXString_lineFrom
    if _newclass:
        lineFrom = staticmethod(_CTXSwig.CTXString_lineFrom)
    __swig_getmethods__["lowerCase"] = lambda x: _CTXSwig.CTXString_lowerCase
    if _newclass:
        lowerCase = staticmethod(_CTXSwig.CTXString_lowerCase)
    __swig_getmethods__["upperCase"] = lambda x: _CTXSwig.CTXString_upperCase
    if _newclass:
        upperCase = staticmethod(_CTXSwig.CTXString_upperCase)
    __swig_getmethods__["getStringLeftTo"] = lambda x: _CTXSwig.CTXString_getStringLeftTo
    if _newclass:
        getStringLeftTo = staticmethod(_CTXSwig.CTXString_getStringLeftTo)
    __swig_getmethods__["getStringRightTo"] = lambda x: _CTXSwig.CTXString_getStringRightTo
    if _newclass:
        getStringRightTo = staticmethod(_CTXSwig.CTXString_getStringRightTo)
    __swig_getmethods__["withoutBlanks"] = lambda x: _CTXSwig.CTXString_withoutBlanks
    if _newclass:
        withoutBlanks = staticmethod(_CTXSwig.CTXString_withoutBlanks)

    def __eq__(self, *args):
        return _CTXSwig.CTXString___eq__(self, *args)

    def __ne__(self, *args):
        return _CTXSwig.CTXString___ne__(self, *args)

    def __elementof__(self, index):
        return _CTXSwig.CTXString___elementof__(self, index)

    def __add__(self, *args):
        return _CTXSwig.CTXString___add__(self, *args)

    def __iadd__(self, *args):
        return _CTXSwig.CTXString___iadd__(self, *args)

    def __equal__(self, *args):
        return _CTXSwig.CTXString___equal__(self, *args)

    def __tocstr__(self):
        return _CTXSwig.CTXString___tocstr__(self)
CTXString_swigregister = _CTXSwig.CTXString_swigregister
CTXString_swigregister(CTXString)

def CTXString_stripBlanks(aCTXString):
    return _CTXSwig.CTXString_stripBlanks(aCTXString)
CTXString_stripBlanks = _CTXSwig.CTXString_stripBlanks

def CTXString_invert(aCTXString):
    return _CTXSwig.CTXString_invert(aCTXString)
CTXString_invert = _CTXSwig.CTXString_invert

def CTXString_lineFrom(*args):
    return _CTXSwig.CTXString_lineFrom(*args)
CTXString_lineFrom = _CTXSwig.CTXString_lineFrom

def CTXString_lowerCase(*args):
    return _CTXSwig.CTXString_lowerCase(*args)
CTXString_lowerCase = _CTXSwig.CTXString_lowerCase

def CTXString_upperCase(*args):
    return _CTXSwig.CTXString_upperCase(*args)
CTXString_upperCase = _CTXSwig.CTXString_upperCase

def CTXString_getStringLeftTo(text, delim):
    return _CTXSwig.CTXString_getStringLeftTo(text, delim)
CTXString_getStringLeftTo = _CTXSwig.CTXString_getStringLeftTo

def CTXString_getStringRightTo(text, delim):
    return _CTXSwig.CTXString_getStringRightTo(text, delim)
CTXString_getStringRightTo = _CTXSwig.CTXString_getStringRightTo

def CTXString_withoutBlanks(string):
    return _CTXSwig.CTXString_withoutBlanks(string)
CTXString_withoutBlanks = _CTXSwig.CTXString_withoutBlanks

def __out__(*args):
    return _CTXSwig.__out__(*args)
__out__ = _CTXSwig.__out__


_CTXSwig.t_COMPONENTNAME_INVALID_COMP_swigconstant(_CTXSwig)
t_COMPONENTNAME_INVALID_COMP = _CTXSwig.t_COMPONENTNAME_INVALID_COMP

_CTXSwig.t_COMPONENTNAME_CELL_swigconstant(_CTXSwig)
t_COMPONENTNAME_CELL = _CTXSwig.t_COMPONENTNAME_CELL

_CTXSwig.t_COMPONENTNAME_COLUMN_swigconstant(_CTXSwig)
t_COMPONENTNAME_COLUMN = _CTXSwig.t_COMPONENTNAME_COLUMN

_CTXSwig.t_COMPONENTNAME_CCORE_swigconstant(_CTXSwig)
t_COMPONENTNAME_CCORE = _CTXSwig.t_COMPONENTNAME_CCORE

_CTXSwig.t_COMPONENTNAME_HYPERCOLUMN_swigconstant(_CTXSwig)
t_COMPONENTNAME_HYPERCOLUMN = _CTXSwig.t_COMPONENTNAME_HYPERCOLUMN

_CTXSwig.t_COMPONENTNAME_REGION_swigconstant(_CTXSwig)
t_COMPONENTNAME_REGION = _CTXSwig.t_COMPONENTNAME_REGION

_CTXSwig.t_COMPONENTNAME_HYPERREGION_swigconstant(_CTXSwig)
t_COMPONENTNAME_HYPERREGION = _CTXSwig.t_COMPONENTNAME_HYPERREGION

_CTXSwig.t_COMPONENTNAME_CORTEX_swigconstant(_CTXSwig)
t_COMPONENTNAME_CORTEX = _CTXSwig.t_COMPONENTNAME_CORTEX

_CTXSwig.t_COMPONENTNAME_CLASSIFIER_swigconstant(_CTXSwig)
t_COMPONENTNAME_CLASSIFIER = _CTXSwig.t_COMPONENTNAME_CLASSIFIER

_CTXSwig.t_COMPONENTNAME_ENCODER_swigconstant(_CTXSwig)
t_COMPONENTNAME_ENCODER = _CTXSwig.t_COMPONENTNAME_ENCODER

_CTXSwig.t_NETWORK_INVALID_NET_swigconstant(_CTXSwig)
t_NETWORK_INVALID_NET = _CTXSwig.t_NETWORK_INVALID_NET

_CTXSwig.t_NETWORK_TOPAZ_NET_swigconstant(_CTXSwig)
t_NETWORK_TOPAZ_NET = _CTXSwig.t_NETWORK_TOPAZ_NET

_CTXSwig.t_NETWORK_NULL_NET_swigconstant(_CTXSwig)
t_NETWORK_NULL_NET = _CTXSwig.t_NETWORK_NULL_NET

_CTXSwig.t_NETWORK_JITTER_NET_swigconstant(_CTXSwig)
t_NETWORK_JITTER_NET = _CTXSwig.t_NETWORK_JITTER_NET

_CTXSwig.t_ENCODERTYPE_INVALID_ENC_swigconstant(_CTXSwig)
t_ENCODERTYPE_INVALID_ENC = _CTXSwig.t_ENCODERTYPE_INVALID_ENC

_CTXSwig.t_ENCODERTYPE_RANDOM_ENCODER_swigconstant(_CTXSwig)
t_ENCODERTYPE_RANDOM_ENCODER = _CTXSwig.t_ENCODERTYPE_RANDOM_ENCODER

_CTXSwig.t_ENCODERTYPE_SCALAR_ENCODER_swigconstant(_CTXSwig)
t_ENCODERTYPE_SCALAR_ENCODER = _CTXSwig.t_ENCODERTYPE_SCALAR_ENCODER

_CTXSwig.t_ENCODERTYPE_RDSE_ENCODER_swigconstant(_CTXSwig)
t_ENCODERTYPE_RDSE_ENCODER = _CTXSwig.t_ENCODERTYPE_RDSE_ENCODER

_CTXSwig.t_ENCODERTYPE_BALANCED_ENCODER_swigconstant(_CTXSwig)
t_ENCODERTYPE_BALANCED_ENCODER = _CTXSwig.t_ENCODERTYPE_BALANCED_ENCODER

_CTXSwig.t_ENCODERTYPE_EXTERNAL_ENCODER_swigconstant(_CTXSwig)
t_ENCODERTYPE_EXTERNAL_ENCODER = _CTXSwig.t_ENCODERTYPE_EXTERNAL_ENCODER

_CTXSwig.t_ENCODERTYPE_SPEECH_ENCODER_swigconstant(_CTXSwig)
t_ENCODERTYPE_SPEECH_ENCODER = _CTXSwig.t_ENCODERTYPE_SPEECH_ENCODER

_CTXSwig.t_ENCODERTYPE_PROPORTIONAL_ENCODER_swigconstant(_CTXSwig)
t_ENCODERTYPE_PROPORTIONAL_ENCODER = _CTXSwig.t_ENCODERTYPE_PROPORTIONAL_ENCODER

_CTXSwig.t_ENCODERTYPE_THRESHOLD_ENCODER_swigconstant(_CTXSwig)
t_ENCODERTYPE_THRESHOLD_ENCODER = _CTXSwig.t_ENCODERTYPE_THRESHOLD_ENCODER

_CTXSwig.t_CLASSIFIERTYPE_INVALID_CLA_swigconstant(_CTXSwig)
t_CLASSIFIERTYPE_INVALID_CLA = _CTXSwig.t_CLASSIFIERTYPE_INVALID_CLA

_CTXSwig.t_CLASSIFIERTYPE_ANOMALY_swigconstant(_CTXSwig)
t_CLASSIFIERTYPE_ANOMALY = _CTXSwig.t_CLASSIFIERTYPE_ANOMALY

_CTXSwig.t_CLASSIFIERTYPE_RECORDER_swigconstant(_CTXSwig)
t_CLASSIFIERTYPE_RECORDER = _CTXSwig.t_CLASSIFIERTYPE_RECORDER

_CTXSwig.t_CLASSIFIERTYPE_PREDICTOR_swigconstant(_CTXSwig)
t_CLASSIFIERTYPE_PREDICTOR = _CTXSwig.t_CLASSIFIERTYPE_PREDICTOR

_CTXSwig.t_TOPOLOGY_INVALID_TOPOLOGY_swigconstant(_CTXSwig)
t_TOPOLOGY_INVALID_TOPOLOGY = _CTXSwig.t_TOPOLOGY_INVALID_TOPOLOGY

_CTXSwig.t_TOPOLOGY_UNIFORM_swigconstant(_CTXSwig)
t_TOPOLOGY_UNIFORM = _CTXSwig.t_TOPOLOGY_UNIFORM

_CTXSwig.t_TOPOLOGY_MESH_swigconstant(_CTXSwig)
t_TOPOLOGY_MESH = _CTXSwig.t_TOPOLOGY_MESH

_CTXSwig.t_TOPOLOGY_TORUS_swigconstant(_CTXSwig)
t_TOPOLOGY_TORUS = _CTXSwig.t_TOPOLOGY_TORUS

_CTXSwig.t_TOPOLOGY_TOPO_LINEAL_swigconstant(_CTXSwig)
t_TOPOLOGY_TOPO_LINEAL = _CTXSwig.t_TOPOLOGY_TOPO_LINEAL

_CTXSwig.t_CELLTYPE_INVALID_CELLTYPE_swigconstant(_CTXSwig)
t_CELLTYPE_INVALID_CELLTYPE = _CTXSwig.t_CELLTYPE_INVALID_CELLTYPE

_CTXSwig.t_CELLTYPE_FULL_CELL_swigconstant(_CTXSwig)
t_CELLTYPE_FULL_CELL = _CTXSwig.t_CELLTYPE_FULL_CELL

_CTXSwig.t_CELLTYPE_LIMITED_CELL_swigconstant(_CTXSwig)
t_CELLTYPE_LIMITED_CELL = _CTXSwig.t_CELLTYPE_LIMITED_CELL

_CTXSwig.t_CELLTYPE_LRU_CELL_swigconstant(_CTXSwig)
t_CELLTYPE_LRU_CELL = _CTXSwig.t_CELLTYPE_LRU_CELL

_CTXSwig.t_CELLTYPE_HW_CELL_swigconstant(_CTXSwig)
t_CELLTYPE_HW_CELL = _CTXSwig.t_CELLTYPE_HW_CELL

_CTXSwig.t_CELLTYPE_STACK_CELL_swigconstant(_CTXSwig)
t_CELLTYPE_STACK_CELL = _CTXSwig.t_CELLTYPE_STACK_CELL

_CTXSwig.t_CELLTYPE_FULL_TEMPORAL_swigconstant(_CTXSwig)
t_CELLTYPE_FULL_TEMPORAL = _CTXSwig.t_CELLTYPE_FULL_TEMPORAL

_CTXSwig.t_COLUMNTYPE_COLUMN_INVALID_swigconstant(_CTXSwig)
t_COLUMNTYPE_COLUMN_INVALID = _CTXSwig.t_COLUMNTYPE_COLUMN_INVALID

_CTXSwig.t_COLUMNTYPE_COLUMN_GLOBAL_RUN_swigconstant(_CTXSwig)
t_COLUMNTYPE_COLUMN_GLOBAL_RUN = _CTXSwig.t_COLUMNTYPE_COLUMN_GLOBAL_RUN

_CTXSwig.t_COLUMNTYPE_COLUMN_LOCAL_RUN_swigconstant(_CTXSwig)
t_COLUMNTYPE_COLUMN_LOCAL_RUN = _CTXSwig.t_COLUMNTYPE_COLUMN_LOCAL_RUN

_CTXSwig.t_COLUMNTYPE_COLUMN_LOCAL_RUN_TIMED_swigconstant(_CTXSwig)
t_COLUMNTYPE_COLUMN_LOCAL_RUN_TIMED = _CTXSwig.t_COLUMNTYPE_COLUMN_LOCAL_RUN_TIMED

_CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_INVALID_swigconstant(_CTXSwig)
t_HYPERCOLUMNTYPE_HYPERCOLUMN_INVALID = _CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_INVALID

_CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_NO_INHIB_swigconstant(_CTXSwig)
t_HYPERCOLUMNTYPE_HYPERCOLUMN_NO_INHIB = _CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_NO_INHIB

_CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_GLOBAL_INHIB_swigconstant(_CTXSwig)
t_HYPERCOLUMNTYPE_HYPERCOLUMN_GLOBAL_INHIB = _CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_GLOBAL_INHIB

_CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_FAST_swigconstant(_CTXSwig)
t_HYPERCOLUMNTYPE_HYPERCOLUMN_FAST = _CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_FAST

_CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_REAL_INHIB_swigconstant(_CTXSwig)
t_HYPERCOLUMNTYPE_HYPERCOLUMN_REAL_INHIB = _CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_REAL_INHIB

_CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_PIPE_swigconstant(_CTXSwig)
t_HYPERCOLUMNTYPE_HYPERCOLUMN_PIPE = _CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_PIPE

_CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_PAPI_swigconstant(_CTXSwig)
t_HYPERCOLUMNTYPE_HYPERCOLUMN_PAPI = _CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_PAPI

_CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_LOCAL_PIPE_swigconstant(_CTXSwig)
t_HYPERCOLUMNTYPE_HYPERCOLUMN_LOCAL_PIPE = _CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_LOCAL_PIPE

_CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_LOCAL_PIPE_TIMED_swigconstant(_CTXSwig)
t_HYPERCOLUMNTYPE_HYPERCOLUMN_LOCAL_PIPE_TIMED = _CTXSwig.t_HYPERCOLUMNTYPE_HYPERCOLUMN_LOCAL_PIPE_TIMED

_CTXSwig.t_REGIONTYPE_REGION_INVALID_swigconstant(_CTXSwig)
t_REGIONTYPE_REGION_INVALID = _CTXSwig.t_REGIONTYPE_REGION_INVALID

_CTXSwig.t_REGIONTYPE_REGION_PLAIN_swigconstant(_CTXSwig)
t_REGIONTYPE_REGION_PLAIN = _CTXSwig.t_REGIONTYPE_REGION_PLAIN

_CTXSwig.t_REGIONTYPE_REGION_APICAL_swigconstant(_CTXSwig)
t_REGIONTYPE_REGION_APICAL = _CTXSwig.t_REGIONTYPE_REGION_APICAL

_CTXSwig.t_REGIONTYPE_REGION_APICAL_MODULATED_swigconstant(_CTXSwig)
t_REGIONTYPE_REGION_APICAL_MODULATED = _CTXSwig.t_REGIONTYPE_REGION_APICAL_MODULATED

_CTXSwig.t_REGIONTYPE_REGION_APICAL_AGE_swigconstant(_CTXSwig)
t_REGIONTYPE_REGION_APICAL_AGE = _CTXSwig.t_REGIONTYPE_REGION_APICAL_AGE

_CTXSwig.t_REGIONTYPE_REGION_ADAPTIVE_swigconstant(_CTXSwig)
t_REGIONTYPE_REGION_ADAPTIVE = _CTXSwig.t_REGIONTYPE_REGION_ADAPTIVE

_CTXSwig.t_REGIONTYPE_SUBREGION_TEMPORAL_POOL_swigconstant(_CTXSwig)
t_REGIONTYPE_SUBREGION_TEMPORAL_POOL = _CTXSwig.t_REGIONTYPE_SUBREGION_TEMPORAL_POOL

_CTXSwig.t_REGIONTYPE_SUBREGION_TEMPORAL_POOL_LEARN_swigconstant(_CTXSwig)
t_REGIONTYPE_SUBREGION_TEMPORAL_POOL_LEARN = _CTXSwig.t_REGIONTYPE_SUBREGION_TEMPORAL_POOL_LEARN

_CTXSwig.t_REGIONTYPE_SUBREGION_TEMPORAL_POOL_CONTEXT_swigconstant(_CTXSwig)
t_REGIONTYPE_SUBREGION_TEMPORAL_POOL_CONTEXT = _CTXSwig.t_REGIONTYPE_SUBREGION_TEMPORAL_POOL_CONTEXT

_CTXSwig.t_REGIONTYPE_SUBREGION_SPATIAL_POOL_swigconstant(_CTXSwig)
t_REGIONTYPE_SUBREGION_SPATIAL_POOL = _CTXSwig.t_REGIONTYPE_SUBREGION_SPATIAL_POOL

_CTXSwig.t_REGIONTYPE_SUBREGION_SPATIAL_POOL_FEEDBACK_swigconstant(_CTXSwig)
t_REGIONTYPE_SUBREGION_SPATIAL_POOL_FEEDBACK = _CTXSwig.t_REGIONTYPE_SUBREGION_SPATIAL_POOL_FEEDBACK

_CTXSwig.t_REGIONTYPE_REGION_CEREBELLAR_swigconstant(_CTXSwig)
t_REGIONTYPE_REGION_CEREBELLAR = _CTXSwig.t_REGIONTYPE_REGION_CEREBELLAR

_CTXSwig.t_REGIONTYPE_REGION_COCHLEARNUCLEI_swigconstant(_CTXSwig)
t_REGIONTYPE_REGION_COCHLEARNUCLEI = _CTXSwig.t_REGIONTYPE_REGION_COCHLEARNUCLEI

_CTXSwig.t_REGIONTYPE_SUBREGION_SPATIAL_POOL_CONTEXT_swigconstant(_CTXSwig)
t_REGIONTYPE_SUBREGION_SPATIAL_POOL_CONTEXT = _CTXSwig.t_REGIONTYPE_SUBREGION_SPATIAL_POOL_CONTEXT

_CTXSwig.t_REGIONTYPE_SUBREGION_SPATIAL_POOL_NOLEARN_swigconstant(_CTXSwig)
t_REGIONTYPE_SUBREGION_SPATIAL_POOL_NOLEARN = _CTXSwig.t_REGIONTYPE_SUBREGION_SPATIAL_POOL_NOLEARN

_CTXSwig.t_REGIONTYPE_REGION_FAKEL6A_swigconstant(_CTXSwig)
t_REGIONTYPE_REGION_FAKEL6A = _CTXSwig.t_REGIONTYPE_REGION_FAKEL6A

_CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_INVALID_swigconstant(_CTXSwig)
t_HYPERREGIONTYPE_HYPERREGION_INVALID = _CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_INVALID

_CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_PLAIN_swigconstant(_CTXSwig)
t_HYPERREGIONTYPE_HYPERREGION_PLAIN = _CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_PLAIN

_CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_DCLA_swigconstant(_CTXSwig)
t_HYPERREGIONTYPE_HYPERREGION_DCLA = _CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_DCLA

_CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_CGAL_swigconstant(_CTXSwig)
t_HYPERREGIONTYPE_HYPERREGION_CGAL = _CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_CGAL

_CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_HER_swigconstant(_CTXSwig)
t_HYPERREGIONTYPE_HYPERREGION_HER = _CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_HER

_CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_PACKHER_swigconstant(_CTXSwig)
t_HYPERREGIONTYPE_HYPERREGION_PACKHER = _CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_PACKHER

_CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_CA3_swigconstant(_CTXSwig)
t_HYPERREGIONTYPE_HYPERREGION_CA3 = _CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_CA3

_CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_PACKCA3_swigconstant(_CTXSwig)
t_HYPERREGIONTYPE_HYPERREGION_PACKCA3 = _CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_PACKCA3

_CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_BRAINSTEM_swigconstant(_CTXSwig)
t_HYPERREGIONTYPE_HYPERREGION_BRAINSTEM = _CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_BRAINSTEM

_CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_BRAINSTEM_NOLEARN_swigconstant(_CTXSwig)
t_HYPERREGIONTYPE_HYPERREGION_BRAINSTEM_NOLEARN = _CTXSwig.t_HYPERREGIONTYPE_HYPERREGION_BRAINSTEM_NOLEARN

_CTXSwig.t_HYPERREGIONTYPE_HYPER_CLASSIFIER_swigconstant(_CTXSwig)
t_HYPERREGIONTYPE_HYPER_CLASSIFIER = _CTXSwig.t_HYPERREGIONTYPE_HYPER_CLASSIFIER

_CTXSwig.t_CORTEXTYPE_CORTEX_SIMPLE_swigconstant(_CTXSwig)
t_CORTEXTYPE_CORTEX_SIMPLE = _CTXSwig.t_CORTEXTYPE_CORTEX_SIMPLE

_CTXSwig.t_CORTEXTYPE_CORTEX_VECTOR_swigconstant(_CTXSwig)
t_CORTEXTYPE_CORTEX_VECTOR = _CTXSwig.t_CORTEXTYPE_CORTEX_VECTOR

_CTXSwig.t_CORTEXTYPE_CORTEX_ZIGZAG_swigconstant(_CTXSwig)
t_CORTEXTYPE_CORTEX_ZIGZAG = _CTXSwig.t_CORTEXTYPE_CORTEX_ZIGZAG

_CTXSwig.t_CORTEXTYPE_CORTEX_COMPLEX_swigconstant(_CTXSwig)
t_CORTEXTYPE_CORTEX_COMPLEX = _CTXSwig.t_CORTEXTYPE_CORTEX_COMPLEX

_CTXSwig.t_VERBOSITY_SILENT_swigconstant(_CTXSwig)
t_VERBOSITY_SILENT = _CTXSwig.t_VERBOSITY_SILENT

_CTXSwig.t_VERBOSITY_SOME_swigconstant(_CTXSwig)
t_VERBOSITY_SOME = _CTXSwig.t_VERBOSITY_SOME

_CTXSwig.t_VERBOSITY_PEDANT_swigconstant(_CTXSwig)
t_VERBOSITY_PEDANT = _CTXSwig.t_VERBOSITY_PEDANT

_CTXSwig.t_VERBOSITY_PLUMBEUS_swigconstant(_CTXSwig)
t_VERBOSITY_PLUMBEUS = _CTXSwig.t_VERBOSITY_PLUMBEUS

_CTXSwig.t_LOCAL_COLUMN_STATE_COMMUNICATION_swigconstant(_CTXSwig)
t_LOCAL_COLUMN_STATE_COMMUNICATION = _CTXSwig.t_LOCAL_COLUMN_STATE_COMMUNICATION

_CTXSwig.t_LOCAL_COLUMN_STATE_SYNC_swigconstant(_CTXSwig)
t_LOCAL_COLUMN_STATE_SYNC = _CTXSwig.t_LOCAL_COLUMN_STATE_SYNC

_CTXSwig.t_LOCAL_COLUMN_STATE_COMPUTE_swigconstant(_CTXSwig)
t_LOCAL_COLUMN_STATE_COMPUTE = _CTXSwig.t_LOCAL_COLUMN_STATE_COMPUTE

_CTXSwig.t_SYNAPSE_STATE_CONNECTED_swigconstant(_CTXSwig)
t_SYNAPSE_STATE_CONNECTED = _CTXSwig.t_SYNAPSE_STATE_CONNECTED

_CTXSwig.t_SYNAPSE_STATE_DISCONNECTED_swigconstant(_CTXSwig)
t_SYNAPSE_STATE_DISCONNECTED = _CTXSwig.t_SYNAPSE_STATE_DISCONNECTED

_CTXSwig.t_SYNAPSE_STATE_ANY_swigconstant(_CTXSwig)
t_SYNAPSE_STATE_ANY = _CTXSwig.t_SYNAPSE_STATE_ANY

_CTXSwig.t_DCLALAMINA_L3_swigconstant(_CTXSwig)
t_DCLALAMINA_L3 = _CTXSwig.t_DCLALAMINA_L3

_CTXSwig.t_DCLALAMINA_L4_swigconstant(_CTXSwig)
t_DCLALAMINA_L4 = _CTXSwig.t_DCLALAMINA_L4

_CTXSwig.t_DCLALAMINA_L2_swigconstant(_CTXSwig)
t_DCLALAMINA_L2 = _CTXSwig.t_DCLALAMINA_L2

_CTXSwig.t_DCLALAMINA_L6_swigconstant(_CTXSwig)
t_DCLALAMINA_L6 = _CTXSwig.t_DCLALAMINA_L6

_CTXSwig.t_DCLALAMINA_L5_swigconstant(_CTXSwig)
t_DCLALAMINA_L5 = _CTXSwig.t_DCLALAMINA_L5

_CTXSwig.t_DCLALAMINA_L5s_swigconstant(_CTXSwig)
t_DCLALAMINA_L5s = _CTXSwig.t_DCLALAMINA_L5s

_CTXSwig.t_CGALLAMINA_L23_swigconstant(_CTXSwig)
t_CGALLAMINA_L23 = _CTXSwig.t_CGALLAMINA_L23

_CTXSwig.t_CGALLAMINA_L4a_swigconstant(_CTXSwig)
t_CGALLAMINA_L4a = _CTXSwig.t_CGALLAMINA_L4a

_CTXSwig.t_CGALLAMINA_L5a_swigconstant(_CTXSwig)
t_CGALLAMINA_L5a = _CTXSwig.t_CGALLAMINA_L5a

_CTXSwig.t_CGALLAMINA_L5b_swigconstant(_CTXSwig)
t_CGALLAMINA_L5b = _CTXSwig.t_CGALLAMINA_L5b

_CTXSwig.t_CGALLAMINA_L6a_swigconstant(_CTXSwig)
t_CGALLAMINA_L6a = _CTXSwig.t_CGALLAMINA_L6a

_CTXSwig.t_HERLAMINA_h23_swigconstant(_CTXSwig)
t_HERLAMINA_h23 = _CTXSwig.t_HERLAMINA_h23

_CTXSwig.t_HERLAMINA_h4_swigconstant(_CTXSwig)
t_HERLAMINA_h4 = _CTXSwig.t_HERLAMINA_h4

_CTXSwig.t_HERLAMINA_h1_swigconstant(_CTXSwig)
t_HERLAMINA_h1 = _CTXSwig.t_HERLAMINA_h1

_CTXSwig.t_HERLAMINA_h5_swigconstant(_CTXSwig)
t_HERLAMINA_h5 = _CTXSwig.t_HERLAMINA_h5

_CTXSwig.t_HERLAMINA_h6b_swigconstant(_CTXSwig)
t_HERLAMINA_h6b = _CTXSwig.t_HERLAMINA_h6b

_CTXSwig.t_HERLAMINA_h6a_swigconstant(_CTXSwig)
t_HERLAMINA_h6a = _CTXSwig.t_HERLAMINA_h6a
class CTXSimulator(CTXBase):
    __swig_setmethods__ = {}
    for _s in [CTXBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTXSimulator, name, value)
    __swig_getmethods__ = {}
    for _s in [CTXBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTXSimulator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CTXSwig.new_CTXSimulator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _CTXSwig.delete_CTXSimulator
    __del__ = lambda self: None
    __swig_getmethods__["instance"] = lambda x: _CTXSwig.CTXSimulator_instance
    if _newclass:
        instance = staticmethod(_CTXSwig.CTXSimulator_instance)
    __swig_getmethods__["destroyInstance"] = lambda x: _CTXSwig.CTXSimulator_destroyInstance
    if _newclass:
        destroyInstance = staticmethod(_CTXSwig.CTXSimulator_destroyInstance)

    def loadCheckpoint(self, *args):
        return _CTXSwig.CTXSimulator_loadCheckpoint(self, *args)

    def loadConfiguration(self, jsonFile):
        return _CTXSwig.CTXSimulator_loadConfiguration(self, jsonFile)

    def flushStatFiles(self):
        return _CTXSwig.CTXSimulator_flushStatFiles(self)

    def createCortex(self, *args):
        return _CTXSwig.CTXSimulator_createCortex(self, *args)

    def createTwoLevelRegions(self, model):
        return _CTXSwig.CTXSimulator_createTwoLevelRegions(self, model)

    def createSpatioTemporalHypercolumn(self, *args):
        return _CTXSwig.CTXSimulator_createSpatioTemporalHypercolumn(self, *args)

    def isAsyncCheckpoint(self):
        return _CTXSwig.CTXSimulator_isAsyncCheckpoint(self)

    def setAsyncCheckpoint(self):
        return _CTXSwig.CTXSimulator_setAsyncCheckpoint(self)

    def getComponentPointer(self, hypercolumn, compo, name):
        return _CTXSwig.CTXSimulator_getComponentPointer(self, hypercolumn, compo, name)

    def getHypercolumn(self, index):
        return _CTXSwig.CTXSimulator_getHypercolumn(self, index)

    def getCortex(self):
        return _CTXSwig.CTXSimulator_getCortex(self)

    def getNumberOfHypercolumns(self):
        return _CTXSwig.CTXSimulator_getNumberOfHypercolumns(self)

    def getClock(self):
        return _CTXSwig.CTXSimulator_getClock(self)

    def setupFileDescriptors(self):
        return _CTXSwig.CTXSimulator_setupFileDescriptors(self)

    def printStats(self, verbosity):
        return _CTXSwig.CTXSimulator_printStats(self, verbosity)

    def printParams(self, terminal=True):
        return _CTXSwig.CTXSimulator_printParams(self, terminal)

    def getParams(self):
        return _CTXSwig.CTXSimulator_getParams(self)

    def printPeriodicStats(self, verbosity, epoch):
        return _CTXSwig.CTXSimulator_printPeriodicStats(self, verbosity, epoch)

    def dumpStatsOnTerm(self, verbosity):
        return _CTXSwig.CTXSimulator_dumpStatsOnTerm(self, verbosity)

    def statsDump(self):
        return _CTXSwig.CTXSimulator_statsDump(self)

    def run(self, cycles=0):
        return _CTXSwig.CTXSimulator_run(self, cycles)

    def run1sample(self):
        return _CTXSwig.CTXSimulator_run1sample(self)

    def disableLearning(self, *args):
        return _CTXSwig.CTXSimulator_disableLearning(self, *args)

    def enableLearning(self, *args):
        return _CTXSwig.CTXSimulator_enableLearning(self, *args)

    def setMaxBurst(self, name, maxBurst):
        return _CTXSwig.CTXSimulator_setMaxBurst(self, name, maxBurst)

    def deleteSynapses(self, regionName):
        return _CTXSwig.CTXSimulator_deleteSynapses(self, regionName)

    def globalDisableLearning(self):
        return _CTXSwig.CTXSimulator_globalDisableLearning(self)

    def globalEnableLearning(self):
        return _CTXSwig.CTXSimulator_globalEnableLearning(self)

    def resetState(self, index):
        return _CTXSwig.CTXSimulator_resetState(self, index)

    def isLearning(self, index):
        return _CTXSwig.CTXSimulator_isLearning(self, index)

    def disableClassifier(self, index):
        return _CTXSwig.CTXSimulator_disableClassifier(self, index)

    def enableClassifier(self, index):
        return _CTXSwig.CTXSimulator_enableClassifier(self, index)

    def disableBurst(self, index):
        return _CTXSwig.CTXSimulator_disableBurst(self, index)

    def enableBurst(self, index):
        return _CTXSwig.CTXSimulator_enableBurst(self, index)

    def isBurst(self, index):
        return _CTXSwig.CTXSimulator_isBurst(self, index)

    def getOutputForHypercolumn(self, index):
        return _CTXSwig.CTXSimulator_getOutputForHypercolumn(self, index)

    def setFeedbackForHyperRegion(self, index, feedback):
        return _CTXSwig.CTXSimulator_setFeedbackForHyperRegion(self, index, feedback)

    def getOutputForHyperRegion(self, index):
        return _CTXSwig.CTXSimulator_getOutputForHyperRegion(self, index)

    def forceEndOfSequence(self, index):
        return _CTXSwig.CTXSimulator_forceEndOfSequence(self, index)

    def enableForcedEOS(self):
        return _CTXSwig.CTXSimulator_enableForcedEOS(self)

    def disableForcedEOS(self):
        return _CTXSwig.CTXSimulator_disableForcedEOS(self)

    def handleRecord(self, *args):
        return _CTXSwig.CTXSimulator_handleRecord(self, *args)

    def handleArrayMultisensor(self, dataIn, otherSensors):
        return _CTXSwig.CTXSimulator_handleArrayMultisensor(self, dataIn, otherSensors)

    def handleArray(self, dataIn):
        return _CTXSwig.CTXSimulator_handleArray(self, dataIn)

    def setEncodersAcuity(self, acuity):
        return _CTXSwig.CTXSimulator_setEncodersAcuity(self, acuity)

    def enableDisableLog(self):
        return _CTXSwig.CTXSimulator_enableDisableLog(self)

    def setInputTag(self, index):
        return _CTXSwig.CTXSimulator_setInputTag(self, index)

    def getInputTag(self):
        return _CTXSwig.CTXSimulator_getInputTag(self)

    def pruneDistalSynapses(self, epochToLastAccess):
        return _CTXSwig.CTXSimulator_pruneDistalSynapses(self, epochToLastAccess)

    def harshPruneDistalSynapses(self, epochToLastAccess, anchorSurvivors=True):
        return _CTXSwig.CTXSimulator_harshPruneDistalSynapses(self, epochToLastAccess, anchorSurvivors)

    def pruneProximalSynapses(self):
        return _CTXSwig.CTXSimulator_pruneProximalSynapses(self)

    def isStable(self):
        return _CTXSwig.CTXSimulator_isStable(self)

    def isDone(self):
        return _CTXSwig.CTXSimulator_isDone(self)

    def stableRatioChange(self):
        return _CTXSwig.CTXSimulator_stableRatioChange(self)

    def doneRatioChange(self):
        return _CTXSwig.CTXSimulator_doneRatioChange(self)

    def getRateChangeSyn(self):
        return _CTXSwig.CTXSimulator_getRateChangeSyn(self)

    def getRatioStableHR(self):
        return _CTXSwig.CTXSimulator_getRatioStableHR(self)

    def enableSWR(self):
        return _CTXSwig.CTXSimulator_enableSWR(self)

    def disableSWR(self):
        return _CTXSwig.CTXSimulator_disableSWR(self)

    def enableFlightRecorder(self):
        return _CTXSwig.CTXSimulator_enableFlightRecorder(self)

    def disableFlightRecorder(self):
        return _CTXSwig.CTXSimulator_disableFlightRecorder(self)

    def enableValidation(self):
        return _CTXSwig.CTXSimulator_enableValidation(self)

    def disableValidation(self):
        return _CTXSwig.CTXSimulator_disableValidation(self)

    def getTagsFound(self):
        return _CTXSwig.CTXSimulator_getTagsFound(self)

    def getPeriods(self):
        return _CTXSwig.CTXSimulator_getPeriods(self)

    def saveCheckpoint(self, *args):
        return _CTXSwig.CTXSimulator_saveCheckpoint(self, *args)

    def saveAndLoadCheckpoint(self):
        return _CTXSwig.CTXSimulator_saveAndLoadCheckpoint(self)

    def silence(self):
        return _CTXSwig.CTXSimulator_silence(self)

    def lateralConn(self):
        return _CTXSwig.CTXSimulator_lateralConn(self)

    def verticalNFBConn(self):
        return _CTXSwig.CTXSimulator_verticalNFBConn(self)

    def printPeriodicStatsById(self, verbosity, epoch, id):
        return _CTXSwig.CTXSimulator_printPeriodicStatsById(self, verbosity, epoch, id)

    def printPeriodicCortex(self, toPrint):
        return _CTXSwig.CTXSimulator_printPeriodicCortex(self, toPrint)
CTXSimulator_swigregister = _CTXSwig.CTXSimulator_swigregister
CTXSimulator_swigregister(CTXSimulator)
cvar = _CTXSwig.cvar
sm_maxNumColumns = cvar.sm_maxNumColumns
TAG_COMPONENTNAME = cvar.TAG_COMPONENTNAME
TAG_NETWORK = cvar.TAG_NETWORK
TAG_ENCODERTYPE = cvar.TAG_ENCODERTYPE
TAG_CLASSIFIERTYPE = cvar.TAG_CLASSIFIERTYPE
TAG_TOPOLOGY = cvar.TAG_TOPOLOGY
TAG_CELLTYPE = cvar.TAG_CELLTYPE
TAG_COLUMNTYPE = cvar.TAG_COLUMNTYPE
TAG_HYPERCOLUMNTYPE = cvar.TAG_HYPERCOLUMNTYPE
TAG_REGIONTYPE = cvar.TAG_REGIONTYPE
TAG_HYPERREGIONTYPE = cvar.TAG_HYPERREGIONTYPE
TAG_CORTEXTYPE = cvar.TAG_CORTEXTYPE
TAG_VERBOSITY = cvar.TAG_VERBOSITY
TAG_DCLA = cvar.TAG_DCLA
TAG_DCLA_SHORT = cvar.TAG_DCLA_SHORT
TAG_CGAL = cvar.TAG_CGAL
TAG_CGAL_SHORT = cvar.TAG_CGAL_SHORT
TAG_HER_SHORT = cvar.TAG_HER_SHORT

def CTXSimulator_instance():
    return _CTXSwig.CTXSimulator_instance()
CTXSimulator_instance = _CTXSwig.CTXSimulator_instance

def CTXSimulator_destroyInstance():
    return _CTXSwig.CTXSimulator_destroyInstance()
CTXSimulator_destroyInstance = _CTXSwig.CTXSimulator_destroyInstance

class CTXModelParam(CTXBase):
    __swig_setmethods__ = {}
    for _s in [CTXBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTXModelParam, name, value)
    __swig_getmethods__ = {}
    for _s in [CTXBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTXModelParam, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CTXSwig.delete_CTXModelParam
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _CTXSwig.new_CTXModelParam(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def isCommitted(self):
        return _CTXSwig.CTXModelParam_isCommitted(self)

    def setName(self, name):
        return _CTXSwig.CTXModelParam_setName(self, name)

    def getName(self):
        return _CTXSwig.CTXModelParam_getName(self)

    def noEncoder(self):
        return _CTXSwig.CTXModelParam_noEncoder(self)

    def haveEncoder(self):
        return _CTXSwig.CTXModelParam_haveEncoder(self)

    def noClassifier(self):
        return _CTXSwig.CTXModelParam_noClassifier(self)

    def haveClassifier(self):
        return _CTXSwig.CTXModelParam_haveClassifier(self)

    def noSP(self):
        return _CTXSwig.CTXModelParam_noSP(self)

    def haveSP(self):
        return _CTXSwig.CTXModelParam_haveSP(self)

    def noTP(self):
        return _CTXSwig.CTXModelParam_noTP(self)

    def haveTP(self):
        return _CTXSwig.CTXModelParam_haveTP(self)

    def setSpInspector(self, inspector):
        return _CTXSwig.CTXModelParam_setSpInspector(self, inspector)

    def getSpInspector(self):
        return _CTXSwig.CTXModelParam_getSpInspector(self)

    def getNumColumns(self):
        return _CTXSwig.CTXModelParam_getNumColumns(self)

    def getNumColumnsActive(self):
        return _CTXSwig.CTXModelParam_getNumColumnsActive(self)

    def setNumColumnsActive(self, col):
        return _CTXSwig.CTXModelParam_setNumColumnsActive(self, col)

    def setNumCCores(self, ccores):
        return _CTXSwig.CTXModelParam_setNumCCores(self, ccores)

    def getNumCCores(self):
        return _CTXSwig.CTXModelParam_getNumCCores(self)

    def setColumnsByDimension(self, *args):
        return _CTXSwig.CTXModelParam_setColumnsByDimension(self, *args)

    def getColumnsByDimension(self):
        return _CTXSwig.CTXModelParam_getColumnsByDimension(self)

    def getNetworkType(self):
        return _CTXSwig.CTXModelParam_getNetworkType(self)

    def setNetworkType(self, net):
        return _CTXSwig.CTXModelParam_setNetworkType(self, net)

    def getNumInputs(self):
        return _CTXSwig.CTXModelParam_getNumInputs(self)

    def setNumInputs(self, inputs):
        return _CTXSwig.CTXModelParam_setNumInputs(self, inputs)

    def getNumActiveInputs(self):
        return _CTXSwig.CTXModelParam_getNumActiveInputs(self)

    def setNumActiveInputs(self, activeI):
        return _CTXSwig.CTXModelParam_setNumActiveInputs(self, activeI)

    def setMinNumActiveInputs(self, activeI):
        return _CTXSwig.CTXModelParam_setMinNumActiveInputs(self, activeI)

    def getMinNumActiveInputs(self):
        return _CTXSwig.CTXModelParam_getMinNumActiveInputs(self)

    def getEncoder(self):
        return _CTXSwig.CTXModelParam_getEncoder(self)

    def setEncoder(self, encoder):
        return _CTXSwig.CTXModelParam_setEncoder(self, encoder)

    def getSecondaryEncoder(self):
        return _CTXSwig.CTXModelParam_getSecondaryEncoder(self)

    def setSecondaryEncoder(self, encoder):
        return _CTXSwig.CTXModelParam_setSecondaryEncoder(self, encoder)

    def getEncoderResolution(self):
        return _CTXSwig.CTXModelParam_getEncoderResolution(self)

    def setEncoderResolution(self, *args):
        return _CTXSwig.CTXModelParam_setEncoderResolution(self, *args)

    def getEncoderMinValues(self):
        return _CTXSwig.CTXModelParam_getEncoderMinValues(self)

    def setEncoderMinValues(self, *args):
        return _CTXSwig.CTXModelParam_setEncoderMinValues(self, *args)

    def getEncoderBuckets(self):
        return _CTXSwig.CTXModelParam_getEncoderBuckets(self)

    def setEncoderBuckets(self, buckets):
        return _CTXSwig.CTXModelParam_setEncoderBuckets(self, buckets)

    def getEncoderDimensions(self):
        return _CTXSwig.CTXModelParam_getEncoderDimensions(self)

    def setEncoderDimensions(self, dims):
        return _CTXSwig.CTXModelParam_setEncoderDimensions(self, dims)

    def getClassifier(self):
        return _CTXSwig.CTXModelParam_getClassifier(self)

    def getClassifierPredictSteps(self):
        return _CTXSwig.CTXModelParam_getClassifierPredictSteps(self)

    def setClassifierPredictSteps(self, steps):
        return _CTXSwig.CTXModelParam_setClassifierPredictSteps(self, steps)

    def setClassifier(self, classifier):
        return _CTXSwig.CTXModelParam_setClassifier(self, classifier)

    def setDistalDiameter(self, dr):
        return _CTXSwig.CTXModelParam_setDistalDiameter(self, dr)

    def getDistalDiameter(self):
        return _CTXSwig.CTXModelParam_getDistalDiameter(self)

    def setDistalTopology(self, top):
        return _CTXSwig.CTXModelParam_setDistalTopology(self, top)

    def getDistalTopology(self):
        return _CTXSwig.CTXModelParam_getDistalTopology(self)

    def setProximalTopology(self, top):
        return _CTXSwig.CTXModelParam_setProximalTopology(self, top)

    def getProximalTopology(self):
        return _CTXSwig.CTXModelParam_getProximalTopology(self)

    def setProximalAxonDiameter(self, dia):
        return _CTXSwig.CTXModelParam_setProximalAxonDiameter(self, dia)

    def getProximalAxonDiameter(self):
        return _CTXSwig.CTXModelParam_getProximalAxonDiameter(self)

    def setReceptiveFieldDiameter(self, dia):
        return _CTXSwig.CTXModelParam_setReceptiveFieldDiameter(self, dia)

    def getReceptiveFieldDiameter(self):
        return _CTXSwig.CTXModelParam_getReceptiveFieldDiameter(self)

    def setPotentialPct(self, pct):
        return _CTXSwig.CTXModelParam_setPotentialPct(self, pct)

    def getPotentialPct(self):
        return _CTXSwig.CTXModelParam_getPotentialPct(self)

    def getProximalLearning(self):
        return _CTXSwig.CTXModelParam_getProximalLearning(self)

    def setProximalLearningRate(self, learnStep):
        return _CTXSwig.CTXModelParam_setProximalLearningRate(self, learnStep)

    def getProximalMaxPermanence(self):
        return _CTXSwig.CTXModelParam_getProximalMaxPermanence(self)

    def setProximalMaxPermanence(self, perm):
        return _CTXSwig.CTXModelParam_setProximalMaxPermanence(self, perm)

    def getProximalMinPermanence(self):
        return _CTXSwig.CTXModelParam_getProximalMinPermanence(self)

    def setProximalMinPermanence(self, perm):
        return _CTXSwig.CTXModelParam_setProximalMinPermanence(self, perm)

    def getDistalMinPermanence(self):
        return _CTXSwig.CTXModelParam_getDistalMinPermanence(self)

    def setDistalMinPermanence(self, perm):
        return _CTXSwig.CTXModelParam_setDistalMinPermanence(self, perm)

    def getProximalBoostStrength(self):
        return _CTXSwig.CTXModelParam_getProximalBoostStrength(self)

    def getProximalBoostDutyCycles(self):
        return _CTXSwig.CTXModelParam_getProximalBoostDutyCycles(self)

    def setProximalBoostStrength(self, boost):
        return _CTXSwig.CTXModelParam_setProximalBoostStrength(self, boost)

    def setProximalBoostDutyCycles(self, tau):
        return _CTXSwig.CTXModelParam_setProximalBoostDutyCycles(self, tau)

    def getDistalMaxPermanence(self):
        return _CTXSwig.CTXModelParam_getDistalMaxPermanence(self)

    def setDistalMaxPermanence(self, perm):
        return _CTXSwig.CTXModelParam_setDistalMaxPermanence(self, perm)

    def getProximalInitialConnectivity(self):
        return _CTXSwig.CTXModelParam_getProximalInitialConnectivity(self)

    def setProximalInitialConnectivity(self, initalCnt):
        return _CTXSwig.CTXModelParam_setProximalInitialConnectivity(self, initalCnt)

    def getProximalForgetting(self):
        return _CTXSwig.CTXModelParam_getProximalForgetting(self)

    def setProximalForgettingRate(self, forgetStep):
        return _CTXSwig.CTXModelParam_setProximalForgettingRate(self, forgetStep)

    def getProximalThreshold(self):
        return _CTXSwig.CTXModelParam_getProximalThreshold(self)

    def setProximalThreshold(self, threshold):
        return _CTXSwig.CTXModelParam_setProximalThreshold(self, threshold)

    def getMaxSynapsesPerProximalCell(self):
        return _CTXSwig.CTXModelParam_getMaxSynapsesPerProximalCell(self)

    def setMaxSynapsesPerProximalCell(self, synapses):
        return _CTXSwig.CTXModelParam_setMaxSynapsesPerProximalCell(self, synapses)

    def getMaxSynapsesPerDistalSegment(self):
        return _CTXSwig.CTXModelParam_getMaxSynapsesPerDistalSegment(self)

    def setMaxSynapsesPerDistalSegment(self, synapses):
        return _CTXSwig.CTXModelParam_setMaxSynapsesPerDistalSegment(self, synapses)

    def getHypercolumnType(self):
        return _CTXSwig.CTXModelParam_getHypercolumnType(self)

    def setHypercolumnType(self, inh):
        return _CTXSwig.CTXModelParam_setHypercolumnType(self, inh)

    def getInhibitionSparsity(self):
        return _CTXSwig.CTXModelParam_getInhibitionSparsity(self)

    def setInhibitionSparsity(self, inh):
        return _CTXSwig.CTXModelParam_setInhibitionSparsity(self, inh)

    def setInhibitionDiameter(self, inhd):
        return _CTXSwig.CTXModelParam_setInhibitionDiameter(self, inhd)

    def getInhibitionWinners(self):
        return _CTXSwig.CTXModelParam_getInhibitionWinners(self)

    def getDistalCellsPerColumn(self):
        return _CTXSwig.CTXModelParam_getDistalCellsPerColumn(self)

    def setDistalCellsPerColumn(self, cells):
        return _CTXSwig.CTXModelParam_setDistalCellsPerColumn(self, cells)

    def setDistalSegmentsCell(self, segments):
        return _CTXSwig.CTXModelParam_setDistalSegmentsCell(self, segments)

    def getDistalSegmentsCell(self):
        return _CTXSwig.CTXModelParam_getDistalSegmentsCell(self)

    def getDistalCellType(self):
        return _CTXSwig.CTXModelParam_getDistalCellType(self)

    def setDistalCellType(self, cellType):
        return _CTXSwig.CTXModelParam_setDistalCellType(self, cellType)

    def getSegmentThreshold(self):
        return _CTXSwig.CTXModelParam_getSegmentThreshold(self)

    def setSegmentThreshold(self, a):
        return _CTXSwig.CTXModelParam_setSegmentThreshold(self, a)

    def getMaxLearningSynapses(self):
        return _CTXSwig.CTXModelParam_getMaxLearningSynapses(self)

    def setMaxLearningSynapses(self, a):
        return _CTXSwig.CTXModelParam_setMaxLearningSynapses(self, a)

    def getMinSynapsesInBursting(self):
        return _CTXSwig.CTXModelParam_getMinSynapsesInBursting(self)

    def setMinSynapsesInBursting(self, a):
        return _CTXSwig.CTXModelParam_setMinSynapsesInBursting(self, a)

    def getDistalThreshold(self):
        return _CTXSwig.CTXModelParam_getDistalThreshold(self)

    def setDistalThreshold(self, threshold):
        return _CTXSwig.CTXModelParam_setDistalThreshold(self, threshold)

    def getDistalLearning(self):
        return _CTXSwig.CTXModelParam_getDistalLearning(self)

    def setDistalLearning(self, inc):
        return _CTXSwig.CTXModelParam_setDistalLearning(self, inc)

    def getDistalForgetting(self):
        return _CTXSwig.CTXModelParam_getDistalForgetting(self)

    def setDistalForgetting(self, dec):
        return _CTXSwig.CTXModelParam_setDistalForgetting(self, dec)

    def getDistalLTDDecay(self):
        return _CTXSwig.CTXModelParam_getDistalLTDDecay(self)

    def setDistalLTDDecay(self, dec):
        return _CTXSwig.CTXModelParam_setDistalLTDDecay(self, dec)

    def getProximalLTDDecay(self):
        return _CTXSwig.CTXModelParam_getProximalLTDDecay(self)

    def setProximalLTDDecay(self, dec):
        return _CTXSwig.CTXModelParam_setProximalLTDDecay(self, dec)

    def getDistalInitialPermanence(self):
        return _CTXSwig.CTXModelParam_getDistalInitialPermanence(self)

    def setDistalInitialPermanence(self, perm):
        return _CTXSwig.CTXModelParam_setDistalInitialPermanence(self, perm)

    def setTopazNetworkModel(self, str):
        return _CTXSwig.CTXModelParam_setTopazNetworkModel(self, str)

    def getTopazNetworkModel(self):
        return _CTXSwig.CTXModelParam_getTopazNetworkModel(self)

    def setTopazInit(self, str):
        return _CTXSwig.CTXModelParam_setTopazInit(self, str)

    def getTopazInit(self):
        return _CTXSwig.CTXModelParam_getTopazInit(self)

    def setTopazThreads(self, numThr):
        return _CTXSwig.CTXModelParam_setTopazThreads(self, numThr)

    def getTopazThreads(self):
        return _CTXSwig.CTXModelParam_getTopazThreads(self)

    def setTopazFlitSize(self, fs):
        return _CTXSwig.CTXModelParam_setTopazFlitSize(self, fs)

    def getTopazFlitSize(self):
        return _CTXSwig.CTXModelParam_getTopazFlitSize(self)

    def getInhibitionDiameter(self):
        return _CTXSwig.CTXModelParam_getInhibitionDiameter(self)

    def setOutScaleZones(self, zones):
        return _CTXSwig.CTXModelParam_setOutScaleZones(self, zones)

    def getOutScaleZones(self):
        return _CTXSwig.CTXModelParam_getOutScaleZones(self)

    def setInputFile(self, name):
        return _CTXSwig.CTXModelParam_setInputFile(self, name)

    def getInputFile(self):
        return _CTXSwig.CTXModelParam_getInputFile(self)

    def setOutFile(self, name):
        return _CTXSwig.CTXModelParam_setOutFile(self, name)

    def getOutFile(self):
        return _CTXSwig.CTXModelParam_getOutFile(self)

    def setStatsFile(self, name):
        return _CTXSwig.CTXModelParam_setStatsFile(self, name)

    def getStatsFile(self):
        return _CTXSwig.CTXModelParam_getStatsFile(self)

    def setOutDir(self, dir):
        return _CTXSwig.CTXModelParam_setOutDir(self, dir)

    def getOutDir(self):
        return _CTXSwig.CTXModelParam_getOutDir(self)

    def getDistalPacketSize(self):
        return _CTXSwig.CTXModelParam_getDistalPacketSize(self)

    def getProximalPacketSize(self):
        return _CTXSwig.CTXModelParam_getProximalPacketSize(self)

    def getInhibitionPacketSize(self):
        return _CTXSwig.CTXModelParam_getInhibitionPacketSize(self)

    def getColumnModel(self):
        return _CTXSwig.CTXModelParam_getColumnModel(self)

    def isCoalescingInjector(self):
        return _CTXSwig.CTXModelParam_isCoalescingInjector(self)

    def setCoalescingInjector(self, value):
        return _CTXSwig.CTXModelParam_setCoalescingInjector(self, value)

    def setVerbosity(self, verb):
        return _CTXSwig.CTXModelParam_setVerbosity(self, verb)

    def getVerbosity(self):
        return _CTXSwig.CTXModelParam_getVerbosity(self)

    def setPeriodicStatsInterval(self, period):
        return _CTXSwig.CTXModelParam_setPeriodicStatsInterval(self, period)

    def getPeriodicStatsInterval(self):
        return _CTXSwig.CTXModelParam_getPeriodicStatsInterval(self)

    def setSeed(self, seed):
        return _CTXSwig.CTXModelParam_setSeed(self, seed)

    def getSeed(self):
        return _CTXSwig.CTXModelParam_getSeed(self)

    def clearMersene(self):
        return _CTXSwig.CTXModelParam_clearMersene(self)

    def isMersene(self):
        return _CTXSwig.CTXModelParam_isMersene(self)

    def setRegionShutDownLearningThreshold(self, thr):
        return _CTXSwig.CTXModelParam_setRegionShutDownLearningThreshold(self, thr)

    def getRegionShutDownLearningThreshold(self):
        return _CTXSwig.CTXModelParam_getRegionShutDownLearningThreshold(self)

    def setRegionRestartLearningThreshold(self, thr):
        return _CTXSwig.CTXModelParam_setRegionRestartLearningThreshold(self, thr)

    def getRegionRestartLearningThreshold(self):
        return _CTXSwig.CTXModelParam_getRegionRestartLearningThreshold(self)

    def setRegionShutDownBurstingThreshold(self, thr):
        return _CTXSwig.CTXModelParam_setRegionShutDownBurstingThreshold(self, thr)

    def getRegionShutDownBurstingThreshold(self):
        return _CTXSwig.CTXModelParam_getRegionShutDownBurstingThreshold(self)

    def setRegionRestartBurstingThreshold(self, thr):
        return _CTXSwig.CTXModelParam_setRegionRestartBurstingThreshold(self, thr)

    def getRegionRestartBurstingThreshold(self):
        return _CTXSwig.CTXModelParam_getRegionRestartBurstingThreshold(self)

    def setMaxProbabilityLearn(self, prob):
        return _CTXSwig.CTXModelParam_setMaxProbabilityLearn(self, prob)

    def getMaxProbabilityLearn(self):
        return _CTXSwig.CTXModelParam_getMaxProbabilityLearn(self)

    def setMinProbabilityLearn(self, prob):
        return _CTXSwig.CTXModelParam_setMinProbabilityLearn(self, prob)

    def getMinProbabilityLearn(self):
        return _CTXSwig.CTXModelParam_getMinProbabilityLearn(self)

    def setRegionReplayBufferSize(self, size):
        return _CTXSwig.CTXModelParam_setRegionReplayBufferSize(self, size)

    def getRegionReplayBufferSize(self):
        return _CTXSwig.CTXModelParam_getRegionReplayBufferSize(self)

    def getRegionAlpha(self):
        return _CTXSwig.CTXModelParam_getRegionAlpha(self)

    def setRegionAlpha(self, alfa):
        return _CTXSwig.CTXModelParam_setRegionAlpha(self, alfa)

    def getRegionAlphaMax(self):
        return _CTXSwig.CTXModelParam_getRegionAlphaMax(self)

    def setRegionRollingWindow(self, rollingWindow):
        return _CTXSwig.CTXModelParam_setRegionRollingWindow(self, rollingWindow)

    def getRegionRollingWindow(self):
        return _CTXSwig.CTXModelParam_getRegionRollingWindow(self)

    def setRegionAlphaMax(self, alfa):
        return _CTXSwig.CTXModelParam_setRegionAlphaMax(self, alfa)

    def setRegionMinimalActivity(self, act):
        return _CTXSwig.CTXModelParam_setRegionMinimalActivity(self, act)

    def getRegionMinimalActivity(self):
        return _CTXSwig.CTXModelParam_getRegionMinimalActivity(self)

    def setRegionMaximalActivity(self, act):
        return _CTXSwig.CTXModelParam_setRegionMaximalActivity(self, act)

    def getRegionMaximalActivity(self):
        return _CTXSwig.CTXModelParam_getRegionMaximalActivity(self)

    def setRegionCholinergicFactor(self, act):
        return _CTXSwig.CTXModelParam_setRegionCholinergicFactor(self, act)

    def getRegionCholinergicFactor(self):
        return _CTXSwig.CTXModelParam_getRegionCholinergicFactor(self)

    def getRegionModel(self):
        return _CTXSwig.CTXModelParam_getRegionModel(self)

    def setRegionModel(self, regM):
        return _CTXSwig.CTXModelParam_setRegionModel(self, regM)

    def getRegionNumReplicas(self):
        return _CTXSwig.CTXModelParam_getRegionNumReplicas(self)

    def setRegionNumReplicas(self, regR):
        return _CTXSwig.CTXModelParam_setRegionNumReplicas(self, regR)

    def getHyperRegionNumReplicas(self):
        return _CTXSwig.CTXModelParam_getHyperRegionNumReplicas(self)

    def setHyperRegionNumReplicas(self, regR):
        return _CTXSwig.CTXModelParam_setHyperRegionNumReplicas(self, regR)

    def getHyperRegionNumInFlows(self):
        return _CTXSwig.CTXModelParam_getHyperRegionNumInFlows(self)

    def setHyperRegionNumInFlows(self, regR):
        return _CTXSwig.CTXModelParam_setHyperRegionNumInFlows(self, regR)

    def getHyperRegionModel(self):
        return _CTXSwig.CTXModelParam_getHyperRegionModel(self)

    def getCortexModel(self):
        return _CTXSwig.CTXModelParam_getCortexModel(self)

    def setCortexModel(self, typ):
        return _CTXSwig.CTXModelParam_setCortexModel(self, typ)

    def setHyperRegionModel(self, regM):
        return _CTXSwig.CTXModelParam_setHyperRegionModel(self, regM)

    def enableClassifier(self):
        return _CTXSwig.CTXModelParam_enableClassifier(self)

    def disableClassifier(self):
        return _CTXSwig.CTXModelParam_disableClassifier(self)

    def isClassifierOn(self):
        return _CTXSwig.CTXModelParam_isClassifierOn(self)

    def enableBioLTD(self):
        return _CTXSwig.CTXModelParam_enableBioLTD(self)

    def disableBioLTD(self):
        return _CTXSwig.CTXModelParam_disableBioLTD(self)

    def isBioLTDEnabled(self):
        return _CTXSwig.CTXModelParam_isBioLTDEnabled(self)

    def setDistalPermanenceBits(self, bits):
        return _CTXSwig.CTXModelParam_setDistalPermanenceBits(self, bits)

    def setProximalPermanenceBits(self, bits):
        return _CTXSwig.CTXModelParam_setProximalPermanenceBits(self, bits)

    def setDistalPermanenceResolution(self, resolution):
        return _CTXSwig.CTXModelParam_setDistalPermanenceResolution(self, resolution)

    def setProximalPermanenceResolution(self, resolution):
        return _CTXSwig.CTXModelParam_setProximalPermanenceResolution(self, resolution)

    def getDistalPermanenceResolution(self):
        return _CTXSwig.CTXModelParam_getDistalPermanenceResolution(self)

    def getProximalPermanenceResolution(self):
        return _CTXSwig.CTXModelParam_getProximalPermanenceResolution(self)

    def getDistalPermanenceBits(self):
        return _CTXSwig.CTXModelParam_getDistalPermanenceBits(self)

    def getProximalPermanenceBits(self):
        return _CTXSwig.CTXModelParam_getProximalPermanenceBits(self)

    def disableMultithread(self):
        return _CTXSwig.CTXModelParam_disableMultithread(self)

    def isMultithreaded(self):
        return _CTXSwig.CTXModelParam_isMultithreaded(self)

    def commit(self):
        return _CTXSwig.CTXModelParam_commit(self)

    def printParameters(self):
        return _CTXSwig.CTXModelParam_printParameters(self)

    def printCortexParameters(self):
        return _CTXSwig.CTXModelParam_printCortexParameters(self)

    def TraceAddTag(self, tag):
        return _CTXSwig.CTXModelParam_TraceAddTag(self, tag)

    def getTagsToTrace(self):
        return _CTXSwig.CTXModelParam_getTagsToTrace(self)

    def TraceSetStart(self, time):
        return _CTXSwig.CTXModelParam_TraceSetStart(self, time)

    def getStartTrace(self):
        return _CTXSwig.CTXModelParam_getStartTrace(self)

    def traceEnabled(self):
        return _CTXSwig.CTXModelParam_traceEnabled(self)

    def setDumpCheckpoint(self, ckptAt):
        return _CTXSwig.CTXModelParam_setDumpCheckpoint(self, ckptAt)

    def getCheckpointAt(self):
        return _CTXSwig.CTXModelParam_getCheckpointAt(self)
CTXModelParam_swigregister = _CTXSwig.CTXModelParam_swigregister
CTXModelParam_swigregister(CTXModelParam)

class CTXHypercolumn(CTXComponent):
    __swig_setmethods__ = {}
    for _s in [CTXComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTXHypercolumn, name, value)
    __swig_getmethods__ = {}
    for _s in [CTXComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTXHypercolumn, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CTXSwig.delete_CTXHypercolumn
    __del__ = lambda self: None

    def master_run(self, cycles):
        return _CTXSwig.CTXHypercolumn_master_run(self, cycles)

    def postinitialize(self):
        return _CTXSwig.CTXHypercolumn_postinitialize(self)

    def getStats(self, verbosity):
        return _CTXSwig.CTXHypercolumn_getStats(self, verbosity)

    def getPeriodicStats(self, verbosity):
        return _CTXSwig.CTXHypercolumn_getPeriodicStats(self, verbosity)

    def getNetwork(self):
        return _CTXSwig.CTXHypercolumn_getNetwork(self)

    def getEncoder(self):
        return _CTXSwig.CTXHypercolumn_getEncoder(self)

    def getClassifier(self):
        return _CTXSwig.CTXHypercolumn_getClassifier(self)

    def getCellById(self, cellId):
        return _CTXSwig.CTXHypercolumn_getCellById(self, cellId)

    def getColById(self, colId):
        return _CTXSwig.CTXHypercolumn_getColById(self, colId)

    def setInput(self, *args):
        return _CTXSwig.CTXHypercolumn_setInput(self, *args)

    def getOutput(self):
        return _CTXSwig.CTXHypercolumn_getOutput(self)

    def setOutput(self, out):
        return _CTXSwig.CTXHypercolumn_setOutput(self, out)

    def getOutputDestroy(self, ret):
        return _CTXSwig.CTXHypercolumn_getOutputDestroy(self, ret)

    def getInput(self):
        return _CTXSwig.CTXHypercolumn_getInput(self)

    def getInputDestroy(self, ret):
        return _CTXSwig.CTXHypercolumn_getInputDestroy(self, ret)

    def getPrevOutput(self):
        return _CTXSwig.CTXHypercolumn_getPrevOutput(self)

    def getInputValue(self):
        return _CTXSwig.CTXHypercolumn_getInputValue(self)

    def getInputValueDestroy(self, ret):
        return _CTXSwig.CTXHypercolumn_getInputValueDestroy(self, ret)

    def getPrevInputValue(self):
        return _CTXSwig.CTXHypercolumn_getPrevInputValue(self)

    def getOutputDetail(self):
        return _CTXSwig.CTXHypercolumn_getOutputDetail(self)

    def isSetInputAt(self, colid):
        return _CTXSwig.CTXHypercolumn_isSetInputAt(self, colid)

    def reset(self):
        return _CTXSwig.CTXHypercolumn_reset(self)

    def clearDistalActivations(self):
        return _CTXSwig.CTXHypercolumn_clearDistalActivations(self)

    def forgetLastDistalActivations(self, arg2):
        return _CTXSwig.CTXHypercolumn_forgetLastDistalActivations(self, arg2)

    def getEpoch(self):
        return _CTXSwig.CTXHypercolumn_getEpoch(self)

    def incEpoch(self):
        return _CTXSwig.CTXHypercolumn_incEpoch(self)

    def incReplayEpoch(self):
        return _CTXSwig.CTXHypercolumn_incReplayEpoch(self)

    def getNumberOfRegions(self):
        return _CTXSwig.CTXHypercolumn_getNumberOfRegions(self)

    def getNumberOfHypercolumns(self):
        return _CTXSwig.CTXHypercolumn_getNumberOfHypercolumns(self)

    def getAnomalyScore(self, *args):
        return _CTXSwig.CTXHypercolumn_getAnomalyScore(self, *args)

    def getIneffScore(self):
        return _CTXSwig.CTXHypercolumn_getIneffScore(self)

    def getAverageAnomalyScore(self):
        return _CTXSwig.CTXHypercolumn_getAverageAnomalyScore(self)

    def getSpAccuracy(self):
        return _CTXSwig.CTXHypercolumn_getSpAccuracy(self)

    def resetSpAccuracyStat(self):
        return _CTXSwig.CTXHypercolumn_resetSpAccuracyStat(self)

    def getAverageSpAccuracy(self):
        return _CTXSwig.CTXHypercolumn_getAverageSpAccuracy(self)

    def getAverageSpConfussion(self):
        return _CTXSwig.CTXHypercolumn_getAverageSpConfussion(self)

    def resetSpConfussionStat(self):
        return _CTXSwig.CTXHypercolumn_resetSpConfussionStat(self)

    def resetEpoch(self):
        return _CTXSwig.CTXHypercolumn_resetEpoch(self)

    def increaseElisedEpoch(self):
        return _CTXSwig.CTXHypercolumn_increaseElisedEpoch(self)

    def getDistalTopology(self):
        return _CTXSwig.CTXHypercolumn_getDistalTopology(self)

    def getProximalTopology(self):
        return _CTXSwig.CTXHypercolumn_getProximalTopology(self)

    def getColumnList(self):
        return _CTXSwig.CTXHypercolumn_getColumnList(self)

    def getNumberSynapses(self, onlyDistal):
        return _CTXSwig.CTXHypercolumn_getNumberSynapses(self, onlyDistal)

    def getNumberConnectedSynapses(self, onlyDistal):
        return _CTXSwig.CTXHypercolumn_getNumberConnectedSynapses(self, onlyDistal)

    def getSynapsesHistogram(self, onlyDistal):
        return _CTXSwig.CTXHypercolumn_getSynapsesHistogram(self, onlyDistal)

    def getConnectedSynapsesHistogram(self, onlyDistal):
        return _CTXSwig.CTXHypercolumn_getConnectedSynapsesHistogram(self, onlyDistal)

    def getCellsCount(self, *args):
        return _CTXSwig.CTXHypercolumn_getCellsCount(self, *args)

    def getCellsCountHistogram(self, *args):
        return _CTXSwig.CTXHypercolumn_getCellsCountHistogram(self, *args)

    def getNumberSegments(self):
        return _CTXSwig.CTXHypercolumn_getNumberSegments(self)

    def getNumberSegmentsHistogram(self):
        return _CTXSwig.CTXHypercolumn_getNumberSegmentsHistogram(self)

    def getPrevCorrectlyPredictedCells(self):
        return _CTXSwig.CTXHypercolumn_getPrevCorrectlyPredictedCells(self)

    def getInputMatchingPredictedCells(self, currInput):
        return _CTXSwig.CTXHypercolumn_getInputMatchingPredictedCells(self, currInput)

    def getPredictions(self):
        return _CTXSwig.CTXHypercolumn_getPredictions(self)

    def getCorrectPredictions(self):
        return _CTXSwig.CTXHypercolumn_getCorrectPredictions(self)

    def saveCheckpoint(self, out):
        return _CTXSwig.CTXHypercolumn_saveCheckpoint(self, out)

    def loadCheckpoint(self, arg2):
        return _CTXSwig.CTXHypercolumn_loadCheckpoint(self, arg2)

    def pruneDistalDendrites(self, minTimeSinceUsedDendr, force, anchorSurvivors):
        return _CTXSwig.CTXHypercolumn_pruneDistalDendrites(self, minTimeSinceUsedDendr, force, anchorSurvivors)

    def getRepeaterColumn(self):
        return _CTXSwig.CTXHypercolumn_getRepeaterColumn(self)

    def setRepeaterColumn(self, col):
        return _CTXSwig.CTXHypercolumn_setRepeaterColumn(self, col)

    def initLog(self):
        return _CTXSwig.CTXHypercolumn_initLog(self)

    def getAllConnDistalSynCnt(self):
        return _CTXSwig.CTXHypercolumn_getAllConnDistalSynCnt(self)
    __swig_setmethods__["m_prevDistalConnected"] = _CTXSwig.CTXHypercolumn_m_prevDistalConnected_set
    __swig_getmethods__["m_prevDistalConnected"] = _CTXSwig.CTXHypercolumn_m_prevDistalConnected_get
    if _newclass:
        m_prevDistalConnected = _swig_property(_CTXSwig.CTXHypercolumn_m_prevDistalConnected_get, _CTXSwig.CTXHypercolumn_m_prevDistalConnected_set)

    def getAvgRateChangeConnDistal(self, update):
        return _CTXSwig.CTXHypercolumn_getAvgRateChangeConnDistal(self, update)
CTXHypercolumn_swigregister = _CTXSwig.CTXHypercolumn_swigregister
CTXHypercolumn_swigregister(CTXHypercolumn)

class CTXEncoder(CTXComponent):
    __swig_setmethods__ = {}
    for _s in [CTXComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTXEncoder, name, value)
    __swig_getmethods__ = {}
    for _s in [CTXComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTXEncoder, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CTXSwig.new_CTXEncoder(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _CTXSwig.delete_CTXEncoder
    __del__ = lambda self: None

    def encode(self, input):
        return _CTXSwig.CTXEncoder_encode(self, input)

    def encodeBucket(self, bucket):
        return _CTXSwig.CTXEncoder_encodeBucket(self, bucket)

    def initialize(self, param):
        return _CTXSwig.CTXEncoder_initialize(self, param)

    def run(self, cycles):
        return _CTXSwig.CTXEncoder_run(self, cycles)

    def getStats(self, verbosity):
        return _CTXSwig.CTXEncoder_getStats(self, verbosity)

    def getNextInput(self):
        return _CTXSwig.CTXEncoder_getNextInput(self)

    def getNextInputSample(self, arg2):
        return _CTXSwig.CTXEncoder_getNextInputSample(self, arg2)

    def pushCurrentValue(self, *args):
        return _CTXSwig.CTXEncoder_pushCurrentValue(self, *args)

    def pushMaxMinValue(self, *args):
        return _CTXSwig.CTXEncoder_pushMaxMinValue(self, *args)

    def lastInputIsClear(self):
        return _CTXSwig.CTXEncoder_lastInputIsClear(self)

    def getAllCurrentValues(self):
        return _CTXSwig.CTXEncoder_getAllCurrentValues(self)

    def getMaxWidthSet(self):
        return _CTXSwig.CTXEncoder_getMaxWidthSet(self)

    def getTotalWidth(self):
        return _CTXSwig.CTXEncoder_getTotalWidth(self)

    def getOutScaleZones(self):
        return _CTXSwig.CTXEncoder_getOutScaleZones(self)

    def overwriteResolution(self, resol, dim=0):
        return _CTXSwig.CTXEncoder_overwriteResolution(self, resol, dim)

    def overwriteResolutionVector(self, resol):
        return _CTXSwig.CTXEncoder_overwriteResolutionVector(self, resol)

    def overwriteMinValue(self, min, dim=0):
        return _CTXSwig.CTXEncoder_overwriteMinValue(self, min, dim)

    def overwriteMinValueVector(self, min):
        return _CTXSwig.CTXEncoder_overwriteMinValueVector(self, min)

    def getMinValue(self, dim=0):
        return _CTXSwig.CTXEncoder_getMinValue(self, dim)

    def getMinValueVector(self, dim=0):
        return _CTXSwig.CTXEncoder_getMinValueVector(self, dim)

    def getResolution(self, dim):
        return _CTXSwig.CTXEncoder_getResolution(self, dim)

    def getResolutionVector(self):
        return _CTXSwig.CTXEncoder_getResolutionVector(self)

    def getDimensions(self):
        return _CTXSwig.CTXEncoder_getDimensions(self)

    def getBuckets(self):
        return _CTXSwig.CTXEncoder_getBuckets(self)

    def computeTimeResolution(self, buckets, dim=0):
        return _CTXSwig.CTXEncoder_computeTimeResolution(self, buckets, dim)

    def setAcuity(self, acRatio):
        return _CTXSwig.CTXEncoder_setAcuity(self, acRatio)

    def getAccuity(self):
        return _CTXSwig.CTXEncoder_getAccuity(self)
CTXEncoder_swigregister = _CTXSwig.CTXEncoder_swigregister
CTXEncoder_swigregister(CTXEncoder)

class CTXCortex(CTXComponent):
    __swig_setmethods__ = {}
    for _s in [CTXComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTXCortex, name, value)
    __swig_getmethods__ = {}
    for _s in [CTXComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTXCortex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CTXSwig.new_CTXCortex(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _CTXSwig.delete_CTXCortex
    __del__ = lambda self: None

    def saveCheckpoint(self, *args):
        return _CTXSwig.CTXCortex_saveCheckpoint(self, *args)

    def loadCheckpoint(self, *args):
        return _CTXSwig.CTXCortex_loadCheckpoint(self, *args)

    def postinitialize(self):
        return _CTXSwig.CTXCortex_postinitialize(self)

    def addHyperRegion(self, model):
        return _CTXSwig.CTXCortex_addHyperRegion(self, model)

    def handleRecord(self, *args):
        return _CTXSwig.CTXCortex_handleRecord(self, *args)

    def getStats(self, debugLevel):
        return _CTXSwig.CTXCortex_getStats(self, debugLevel)

    def run(self, cycles):
        return _CTXSwig.CTXCortex_run(self, cycles)

    def getClock(self):
        return _CTXSwig.CTXCortex_getClock(self)

    def getPeriods(self):
        return _CTXSwig.CTXCortex_getPeriods(self)

    def isCortexStable(self):
        return _CTXSwig.CTXCortex_isCortexStable(self)

    def getRateChangeSyn(self):
        return _CTXSwig.CTXCortex_getRateChangeSyn(self)

    def getRatioStableHR(self):
        return _CTXSwig.CTXCortex_getRatioStableHR(self)

    def clearCortexStable(self):
        return _CTXSwig.CTXCortex_clearCortexStable(self)

    def stableRatioChange(self):
        return _CTXSwig.CTXCortex_stableRatioChange(self)

    def doneRatioChange(self):
        return _CTXSwig.CTXCortex_doneRatioChange(self)

    def isCortexDone(self):
        return _CTXSwig.CTXCortex_isCortexDone(self)

    def clearCortexDone(self):
        return _CTXSwig.CTXCortex_clearCortexDone(self)

    def getClockAddr(self):
        return _CTXSwig.CTXCortex_getClockAddr(self)

    def getNumberOfHyperRegions(self):
        return _CTXSwig.CTXCortex_getNumberOfHyperRegions(self)

    def getHyperRegionArray(self):
        return _CTXSwig.CTXCortex_getHyperRegionArray(self)

    def getSimulator(self):
        return _CTXSwig.CTXCortex_getSimulator(self)

    def forwardTrace(self, str):
        return _CTXSwig.CTXCortex_forwardTrace(self, str)

    def pushDataToEncoders(self, *args):
        return _CTXSwig.CTXCortex_pushDataToEncoders(self, *args)

    def pushMaxValToEncoders(self, maxVal):
        return _CTXSwig.CTXCortex_pushMaxValToEncoders(self, maxVal)

    def pushMaxMinValToEncoders(self, maxVal, minval):
        return _CTXSwig.CTXCortex_pushMaxMinValToEncoders(self, maxVal, minval)

    def setEncodersAcuity(self, acuity):
        return _CTXSwig.CTXCortex_setEncodersAcuity(self, acuity)

    def setFeedbackForHyperRegion(self, idx, value):
        return _CTXSwig.CTXCortex_setFeedbackForHyperRegion(self, idx, value)

    def getOutputForHyperRegion(self, idx):
        return _CTXSwig.CTXCortex_getOutputForHyperRegion(self, idx)

    def forceEndOfSequence(self, index):
        return _CTXSwig.CTXCortex_forceEndOfSequence(self, index)

    def enableForcedEOS(self):
        return _CTXSwig.CTXCortex_enableForcedEOS(self)

    def disableForcedEOS(self):
        return _CTXSwig.CTXCortex_disableForcedEOS(self)

    def disableSWR(self):
        return _CTXSwig.CTXCortex_disableSWR(self)

    def enableSWR(self):
        return _CTXSwig.CTXCortex_enableSWR(self)

    def disableFlightRecorder(self):
        return _CTXSwig.CTXCortex_disableFlightRecorder(self)

    def enableFlightRecorder(self):
        return _CTXSwig.CTXCortex_enableFlightRecorder(self)

    def enableValidation(self):
        return _CTXSwig.CTXCortex_enableValidation(self)

    def disableValidation(self):
        return _CTXSwig.CTXCortex_disableValidation(self)

    def getTagsFound(self):
        return _CTXSwig.CTXCortex_getTagsFound(self)

    def showBar(self, percentage):
        return _CTXSwig.CTXCortex_showBar(self, percentage)

    def getPool(self):
        return _CTXSwig.CTXCortex_getPool(self)

    def createPool(self):
        return _CTXSwig.CTXCortex_createPool(self)

    def printPeriodicStats(self, verbosity, epoch):
        return _CTXSwig.CTXCortex_printPeriodicStats(self, verbosity, epoch)

    def getCoordinates(self, hr):
        return _CTXSwig.CTXCortex_getCoordinates(self, hr)
CTXCortex_swigregister = _CTXSwig.CTXCortex_swigregister
CTXCortex_swigregister(CTXCortex)

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CTXSwig.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _CTXSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CTXSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CTXSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CTXSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CTXSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CTXSwig.SwigPyIterator_copy(self)

    def next(self):
        return _CTXSwig.SwigPyIterator_next(self)

    def __next__(self):
        return _CTXSwig.SwigPyIterator___next__(self)

    def previous(self):
        return _CTXSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CTXSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CTXSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CTXSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CTXSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CTXSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CTXSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CTXSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _CTXSwig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CTXSwig.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CTXSwig.IntVector___nonzero__(self)

    def __bool__(self):
        return _CTXSwig.IntVector___bool__(self)

    def __len__(self):
        return _CTXSwig.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _CTXSwig.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CTXSwig.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CTXSwig.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CTXSwig.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CTXSwig.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CTXSwig.IntVector___setitem__(self, *args)

    def pop(self):
        return _CTXSwig.IntVector_pop(self)

    def append(self, x):
        return _CTXSwig.IntVector_append(self, x)

    def empty(self):
        return _CTXSwig.IntVector_empty(self)

    def size(self):
        return _CTXSwig.IntVector_size(self)

    def swap(self, v):
        return _CTXSwig.IntVector_swap(self, v)

    def begin(self):
        return _CTXSwig.IntVector_begin(self)

    def end(self):
        return _CTXSwig.IntVector_end(self)

    def rbegin(self):
        return _CTXSwig.IntVector_rbegin(self)

    def rend(self):
        return _CTXSwig.IntVector_rend(self)

    def clear(self):
        return _CTXSwig.IntVector_clear(self)

    def get_allocator(self):
        return _CTXSwig.IntVector_get_allocator(self)

    def pop_back(self):
        return _CTXSwig.IntVector_pop_back(self)

    def erase(self, *args):
        return _CTXSwig.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _CTXSwig.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _CTXSwig.IntVector_push_back(self, x)

    def front(self):
        return _CTXSwig.IntVector_front(self)

    def back(self):
        return _CTXSwig.IntVector_back(self)

    def assign(self, n, x):
        return _CTXSwig.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _CTXSwig.IntVector_resize(self, *args)

    def insert(self, *args):
        return _CTXSwig.IntVector_insert(self, *args)

    def reserve(self, n):
        return _CTXSwig.IntVector_reserve(self, n)

    def capacity(self):
        return _CTXSwig.IntVector_capacity(self)
    __swig_destroy__ = _CTXSwig.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _CTXSwig.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CTXSwig.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CTXSwig.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CTXSwig.DoubleVector___bool__(self)

    def __len__(self):
        return _CTXSwig.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CTXSwig.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CTXSwig.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CTXSwig.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CTXSwig.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CTXSwig.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CTXSwig.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CTXSwig.DoubleVector_pop(self)

    def append(self, x):
        return _CTXSwig.DoubleVector_append(self, x)

    def empty(self):
        return _CTXSwig.DoubleVector_empty(self)

    def size(self):
        return _CTXSwig.DoubleVector_size(self)

    def swap(self, v):
        return _CTXSwig.DoubleVector_swap(self, v)

    def begin(self):
        return _CTXSwig.DoubleVector_begin(self)

    def end(self):
        return _CTXSwig.DoubleVector_end(self)

    def rbegin(self):
        return _CTXSwig.DoubleVector_rbegin(self)

    def rend(self):
        return _CTXSwig.DoubleVector_rend(self)

    def clear(self):
        return _CTXSwig.DoubleVector_clear(self)

    def get_allocator(self):
        return _CTXSwig.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CTXSwig.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CTXSwig.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _CTXSwig.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _CTXSwig.DoubleVector_push_back(self, x)

    def front(self):
        return _CTXSwig.DoubleVector_front(self)

    def back(self):
        return _CTXSwig.DoubleVector_back(self)

    def assign(self, n, x):
        return _CTXSwig.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CTXSwig.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CTXSwig.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CTXSwig.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CTXSwig.DoubleVector_capacity(self)
    __swig_destroy__ = _CTXSwig.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _CTXSwig.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class DoubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CTXSwig.DoubleArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CTXSwig.DoubleArray___nonzero__(self)

    def __bool__(self):
        return _CTXSwig.DoubleArray___bool__(self)

    def __len__(self):
        return _CTXSwig.DoubleArray___len__(self)

    def __getslice__(self, i, j):
        return _CTXSwig.DoubleArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CTXSwig.DoubleArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CTXSwig.DoubleArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CTXSwig.DoubleArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CTXSwig.DoubleArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CTXSwig.DoubleArray___setitem__(self, *args)

    def pop(self):
        return _CTXSwig.DoubleArray_pop(self)

    def append(self, x):
        return _CTXSwig.DoubleArray_append(self, x)

    def empty(self):
        return _CTXSwig.DoubleArray_empty(self)

    def size(self):
        return _CTXSwig.DoubleArray_size(self)

    def swap(self, v):
        return _CTXSwig.DoubleArray_swap(self, v)

    def begin(self):
        return _CTXSwig.DoubleArray_begin(self)

    def end(self):
        return _CTXSwig.DoubleArray_end(self)

    def rbegin(self):
        return _CTXSwig.DoubleArray_rbegin(self)

    def rend(self):
        return _CTXSwig.DoubleArray_rend(self)

    def clear(self):
        return _CTXSwig.DoubleArray_clear(self)

    def get_allocator(self):
        return _CTXSwig.DoubleArray_get_allocator(self)

    def pop_back(self):
        return _CTXSwig.DoubleArray_pop_back(self)

    def erase(self, *args):
        return _CTXSwig.DoubleArray_erase(self, *args)

    def __init__(self, *args):
        this = _CTXSwig.new_DoubleArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _CTXSwig.DoubleArray_push_back(self, x)

    def front(self):
        return _CTXSwig.DoubleArray_front(self)

    def back(self):
        return _CTXSwig.DoubleArray_back(self)

    def assign(self, n, x):
        return _CTXSwig.DoubleArray_assign(self, n, x)

    def resize(self, *args):
        return _CTXSwig.DoubleArray_resize(self, *args)

    def insert(self, *args):
        return _CTXSwig.DoubleArray_insert(self, *args)

    def reserve(self, n):
        return _CTXSwig.DoubleArray_reserve(self, n)

    def capacity(self):
        return _CTXSwig.DoubleArray_capacity(self)
    __swig_destroy__ = _CTXSwig.delete_DoubleArray
    __del__ = lambda self: None
DoubleArray_swigregister = _CTXSwig.DoubleArray_swigregister
DoubleArray_swigregister(DoubleArray)

class DoubleTensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleTensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleTensor, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CTXSwig.DoubleTensor_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CTXSwig.DoubleTensor___nonzero__(self)

    def __bool__(self):
        return _CTXSwig.DoubleTensor___bool__(self)

    def __len__(self):
        return _CTXSwig.DoubleTensor___len__(self)

    def __getslice__(self, i, j):
        return _CTXSwig.DoubleTensor___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CTXSwig.DoubleTensor___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CTXSwig.DoubleTensor___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CTXSwig.DoubleTensor___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CTXSwig.DoubleTensor___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CTXSwig.DoubleTensor___setitem__(self, *args)

    def pop(self):
        return _CTXSwig.DoubleTensor_pop(self)

    def append(self, x):
        return _CTXSwig.DoubleTensor_append(self, x)

    def empty(self):
        return _CTXSwig.DoubleTensor_empty(self)

    def size(self):
        return _CTXSwig.DoubleTensor_size(self)

    def swap(self, v):
        return _CTXSwig.DoubleTensor_swap(self, v)

    def begin(self):
        return _CTXSwig.DoubleTensor_begin(self)

    def end(self):
        return _CTXSwig.DoubleTensor_end(self)

    def rbegin(self):
        return _CTXSwig.DoubleTensor_rbegin(self)

    def rend(self):
        return _CTXSwig.DoubleTensor_rend(self)

    def clear(self):
        return _CTXSwig.DoubleTensor_clear(self)

    def get_allocator(self):
        return _CTXSwig.DoubleTensor_get_allocator(self)

    def pop_back(self):
        return _CTXSwig.DoubleTensor_pop_back(self)

    def erase(self, *args):
        return _CTXSwig.DoubleTensor_erase(self, *args)

    def __init__(self, *args):
        this = _CTXSwig.new_DoubleTensor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _CTXSwig.DoubleTensor_push_back(self, x)

    def front(self):
        return _CTXSwig.DoubleTensor_front(self)

    def back(self):
        return _CTXSwig.DoubleTensor_back(self)

    def assign(self, n, x):
        return _CTXSwig.DoubleTensor_assign(self, n, x)

    def resize(self, *args):
        return _CTXSwig.DoubleTensor_resize(self, *args)

    def insert(self, *args):
        return _CTXSwig.DoubleTensor_insert(self, *args)

    def reserve(self, n):
        return _CTXSwig.DoubleTensor_reserve(self, n)

    def capacity(self):
        return _CTXSwig.DoubleTensor_capacity(self)
    __swig_destroy__ = _CTXSwig.delete_DoubleTensor
    __del__ = lambda self: None
DoubleTensor_swigregister = _CTXSwig.DoubleTensor_swigregister
DoubleTensor_swigregister(DoubleTensor)

class CTXModelParamArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTXModelParamArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CTXModelParamArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CTXSwig.CTXModelParamArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CTXSwig.CTXModelParamArray___nonzero__(self)

    def __bool__(self):
        return _CTXSwig.CTXModelParamArray___bool__(self)

    def __len__(self):
        return _CTXSwig.CTXModelParamArray___len__(self)

    def __getslice__(self, i, j):
        return _CTXSwig.CTXModelParamArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CTXSwig.CTXModelParamArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CTXSwig.CTXModelParamArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CTXSwig.CTXModelParamArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CTXSwig.CTXModelParamArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CTXSwig.CTXModelParamArray___setitem__(self, *args)

    def pop(self):
        return _CTXSwig.CTXModelParamArray_pop(self)

    def append(self, x):
        return _CTXSwig.CTXModelParamArray_append(self, x)

    def empty(self):
        return _CTXSwig.CTXModelParamArray_empty(self)

    def size(self):
        return _CTXSwig.CTXModelParamArray_size(self)

    def swap(self, v):
        return _CTXSwig.CTXModelParamArray_swap(self, v)

    def begin(self):
        return _CTXSwig.CTXModelParamArray_begin(self)

    def end(self):
        return _CTXSwig.CTXModelParamArray_end(self)

    def rbegin(self):
        return _CTXSwig.CTXModelParamArray_rbegin(self)

    def rend(self):
        return _CTXSwig.CTXModelParamArray_rend(self)

    def clear(self):
        return _CTXSwig.CTXModelParamArray_clear(self)

    def get_allocator(self):
        return _CTXSwig.CTXModelParamArray_get_allocator(self)

    def pop_back(self):
        return _CTXSwig.CTXModelParamArray_pop_back(self)

    def erase(self, *args):
        return _CTXSwig.CTXModelParamArray_erase(self, *args)

    def __init__(self, *args):
        this = _CTXSwig.new_CTXModelParamArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _CTXSwig.CTXModelParamArray_push_back(self, x)

    def front(self):
        return _CTXSwig.CTXModelParamArray_front(self)

    def back(self):
        return _CTXSwig.CTXModelParamArray_back(self)

    def assign(self, n, x):
        return _CTXSwig.CTXModelParamArray_assign(self, n, x)

    def resize(self, *args):
        return _CTXSwig.CTXModelParamArray_resize(self, *args)

    def insert(self, *args):
        return _CTXSwig.CTXModelParamArray_insert(self, *args)

    def reserve(self, n):
        return _CTXSwig.CTXModelParamArray_reserve(self, n)

    def capacity(self):
        return _CTXSwig.CTXModelParamArray_capacity(self)
    __swig_destroy__ = _CTXSwig.delete_CTXModelParamArray
    __del__ = lambda self: None
CTXModelParamArray_swigregister = _CTXSwig.CTXModelParamArray_swigregister
CTXModelParamArray_swigregister(CTXModelParamArray)

# This file is compatible with both classic and new-style classes.


